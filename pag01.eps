%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Dtx_pubciencias_notas.pdf
%%Creator: Adobe Acrobat 18.11.0
%%For: Andres
%%CreationDate: 26/09/2018, 20:37:38
%%BoundingBox: 0 0 454 681
%%HiResBoundingBox: 0 0 453.5401 680.3100
%%CropBox: 0 0 453.5401 680.3100
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1110 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="dvips + GPL Ghostscript 9.18"
   pdf:Keywords=""
   xmp:ModifyDate="2018-09-27T01:35:27Z"
   xmp:CreateDate="2018-09-27T01:35:27Z"
   xmp:CreatorTool="LaTeX with hyperref package"
   xmpMM:DocumentID="uuid:2926c819-fa12-11f3-0000-7d48fb4acea9"
   xmpMM:InstanceID="uuid:2926c819-fa12-11f3-0000-7d48fb4acea9"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -680.31 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 680.31 li
453.54 680.31 li
453.54 0 li
cp
clp
.405 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
48.1859 45.698 mo
405.36 45.698 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.810547 .619141 0 .219971 cmyk
@
gsave
49.0321 88.805 mo
81.275 88.805 li
81.275 51.5402 li
49.0321 51.5402 li
49.0321 88.805 li
clp
78.3488 64.55 mo
65.5969 64.55 li
65.5969 83.305 li
65.5969 83.305 67.0086 81.2859 71.5016 80.6 cv
71.5016 80.6 72.873 80.469 73.7711 80.515 cv
73.7711 80.515 77.7492 80.469 78.3488 76.01 cv
cp
/1 
[/DeviceCMYK] /CSA add_res
.973083 .805478 .352758 .238712 cmyk
f
51.9348 64.595 mo
64.6855 64.595 li
64.6855 83.345 li
64.6855 83.345 63.275 81.33 58.7801 80.643 cv
58.7801 80.643 57.4129 80.515 56.5148 80.558 cv
56.5148 80.558 52.5332 80.515 51.9348 76.053 cv
cp
f
52.041 63.68 mo
78.3488 63.68 li
78.3488 51.5402 li
52.041 51.5402 li
cp
0 .897459 .834134 0 cmyk
f
81.291 80.797 mo
81.291 80.797 78.4055 81.651 79.1121 80.978 cv
79.8191 80.302 80.5621 77.56 80.5621 77.56 cv
80.5621 77.56 78.6402 80.651 75.0168 81.05 cv
75.0168 81.052 li
74.4125 81.121 73.9914 81.269 73.9914 81.441 cv
73.9926 81.521 li
74.0684 81.74 74.8285 81.915 75.7566 81.918 cv
75.8645 81.918 75.9707 81.915 76.0738 81.913 cv
76.2645 81.897 li
76.3871 81.918 li
76.5395 81.988 76.609 82.196 76.5906 82.4609 cv
76.602 82.448 li
76.5816 84.017 li
76.5816 84.06 li
79.0938 83.459 80.4617 82.189 81.291 80.797 cv
.357427 .283757 .374853 .00384527 cmyk
f
76.5906 82.4609 mo
76.609 82.196 76.5395 81.988 76.3875 81.918 cv
76.2645 81.897 li
76.0738 81.913 li
75.9707 81.915 75.8645 81.918 75.7566 81.918 cv
74.8285 81.915 74.0684 81.74 73.9926 81.521 cv
74.0449 84.267 li
74.0766 84.254 li
75.1883 83.716 76.0547 83.101 76.5906 82.4609 cv
.444068 .482246 .506157 .103334 cmyk
f
53.7176 84.019 mo
53.7008 82.667 li
53.6988 82.534 li
53.6973 82.448 li
53.7039 82.457 li
53.6891 82.195 53.7563 81.9919 53.9074 81.926 cv
54.0293 81.901 li
54.2211 81.918 li
54.3246 81.922 54.4297 81.924 54.5391 81.924 cv
55.4535 81.92 56.2039 81.75 56.2992 81.535 cv
56.2996 81.474 li
56.2996 81.301 55.8797 81.154 55.2766 81.0859 cv
55.2766 81.083 li
51.6699 80.683 49.7559 77.592 49.7559 77.592 cv
49.7559 77.592 50.4949 80.3359 51.1984 81.009 cv
51.9035 81.685 49.032 80.83 49.032 80.83 cv
49.8555 82.2209 51.218 83.4919 53.7207 84.094 cv
53.7176 84.048 li
cp
.357427 .283757 .374853 .00384527 cmyk
f
54.5391 81.924 mo
54.4297 81.924 54.3246 81.922 54.2215 81.918 cv
54.0293 81.901 li
53.9074 81.926 li
53.7563 81.9919 53.6891 82.195 53.7039 82.457 cv
54.2371 83.094 55.1039 83.7109 56.2176 84.249 cv
56.2371 84.257 li
56.25 84.264 li
56.3027 81.526 li
56.2992 81.535 li
56.2035 81.75 55.4535 81.92 54.5391 81.924 cv
.444068 .482246 .506157 .103334 cmyk
f
76.602 82.448 mo
76.5906 82.4609 li
76.0547 83.101 75.1883 83.716 74.0766 84.254 cv
74.0449 84.267 li
71.8309 85.329 68.6594 86.078 65.1969 86.078 cv
65.1055 86.078 li
61.6395 86.078 58.4641 85.326 56.25 84.264 cv
56.2371 84.257 li
56.2176 84.249 li
55.1039 83.7109 54.2371 83.094 53.7039 82.457 cv
53.6973 82.448 li
53.6988 82.534 li
53.7008 82.667 li
53.7176 84.019 li
53.7176 84.048 li
53.7207 84.094 li
53.7379 85.438 li
55.2453 87.4109 59.7656 88.8459 65.1055 88.8459 cv
65.1969 88.8459 li
70.5387 88.8459 75.0574 87.4109 76.5633 85.438 cv
76.5816 84.06 li
76.5816 84.017 li
cp
.973083 .805478 .352758 .238712 cmyk
f
53.0305 77.647 mo
63.534 77.647 li
63.534 77.0571 li
53.0305 77.0571 li
cp
.444068 .482246 .506157 .103334 cmyk
f
63.5301 69.094 mo
63.5301 69.12 li
63.5328 69.094 li
cp
.0115358 0 .275395 0 cmyk
f
53.6016 76.061 mo
53.6016 76.061 53.7207 76.099 54.0098 75.989 cv
54.0098 75.989 56.9203 75.069 58.275 76.418 cv
58.2793 76.418 li
59.6344 75.069 62.5457 75.989 62.5457 75.989 cv
62.834 76.099 62.9531 76.061 62.9531 76.061 cv
63.3551 76.33 63.5254 75.946 63.5254 75.946 cv
63.5301 76.66 li
63.5301 69.12 li
63.5102 69.262 63.357 69.373 63.1645 69.373 cv
62.8789 69.364 li
62.8789 69.363 li
62.7125 69.363 li
60.3008 68.404 58.2813 69.537 58.2813 69.537 cv
58.2746 69.537 li
58.2746 69.537 56.2543 68.404 53.8422 69.363 cv
53.6746 69.363 li
53.6746 69.364 li
53.4105 69.373 li
53.2113 69.373 53.0492 69.264 53.0305 69.122 cv
53.0305 75.951 li
53.0492 75.9919 53.2227 76.314 53.6016 76.061 cv
.0285649 .0184329 .215763 0 cmyk
f
63.5254 75.946 mo
63.5254 75.946 63.3551 76.33 62.9531 76.061 cv
62.9531 76.061 62.834 76.099 62.5453 75.989 cv
62.5453 75.989 59.6344 75.069 58.2793 76.418 cv
58.275 76.418 li
56.9203 75.069 54.0098 75.989 54.0098 75.989 cv
53.7207 76.099 53.6016 76.061 53.6016 76.061 cv
53.2227 76.314 53.0492 75.9919 53.0305 75.951 cv
53.0285 75.946 li
53.0285 77.057 li
63.5301 77.057 li
63.5301 76.66 li
cp
.357427 .283757 .374853 .00384527 cmyk
f
67.082 59.676 mo
67.1906 59.615 67.298 59.552 67.3988 59.481 cv
67.3148 59.416 67.2266 59.358 67.1289 59.311 cv
67.1168 59.436 67.0992 59.557 67.082 59.676 cv
.527916 .292302 0 0 cmyk
f
66.4883 59.167 mo
66.3898 59.167 66.2887 59.18 66.1895 59.2 cv
66.4301 59.913 li
66.5219 59.883 66.6152 59.847 66.7047 59.807 cv
66.7074 59.807 li
66.7609 59.785 li
66.7969 59.604 66.8246 59.413 66.8406 59.21 cv
66.7266 59.183 66.6102 59.167 66.4883 59.167 cv
f
67.1355 54.201 mo
67.2785 54.108 67.4059 54.012 67.5262 53.916 cv
67.1547 53.641 66.7301 53.434 66.277 53.302 cv
66.5887 53.56 66.8805 53.86 67.1355 54.201 cv
f
68.2566 57.233 mo
68.475 57.236 68.6809 57.249 68.8754 57.274 cv
68.9734 56.776 68.9551 56.255 68.8055 55.74 cv
68.0227 55.967 li
68.1531 56.393 68.2305 56.818 68.2566 57.233 cv
f
65.3188 53.594 mo
65.5945 53.936 65.8551 54.333 66.0891 54.769 cv
66.3754 54.639 66.6422 54.502 66.8832 54.358 cv
66.5105 53.866 66.0633 53.462 65.5789 53.167 cv
65.5332 53.164 li
65.4855 53.3149 65.4129 53.46 65.3188 53.594 cv
f
65.1309 60.122 mo
65.1785 60.122 li
65.4289 60.111 li
65.2234 59.896 li
65.1309 60.122 li
f
67.9328 55.683 mo
68.7121 55.458 li
68.5051 54.928 68.177 54.4709 67.7617 54.106 cv
67.6227 54.222 67.4727 54.335 67.3063 54.443 cv
67.5582 54.819 67.7699 55.235 67.9328 55.683 cv
f
68.2715 57.5649 mo
68.2715 58.019 68.2074 58.455 68.091 58.863 cv
68.4242 58.48 68.6652 58.037 68.8055 57.563 cv
68.6363 57.546 68.459 57.533 68.2684 57.53 cv
68.2715 57.5649 li
f
63.2605 53.666 mo
63.1863 53.707 li
63.1152 53.753 li
63.0852 53.772 li
63.2328 53.858 li
63.2605 53.666 li
f
63.2891 55.572 mo
63.2305 55.192 63.2012 54.822 63.2012 54.475 cv
63.2012 54.372 63.2035 54.2729 63.2086 54.174 cv
63.0715 54.118 62.9457 54.041 62.8277 53.952 cv
62.6961 54.054 li
62.4973 54.533 62.3859 55.072 62.3805 55.6479 cv
62.6691 55.641 62.9719 55.616 63.2891 55.572 cv
f
63.8938 54.0129 mo
64.1324 53.9919 li
63.9242 53.373 li
63.834 53.404 63.7426 53.437 63.6508 53.474 cv
63.5922 53.504 li
63.5605 53.651 63.5355 53.803 63.5211 53.964 cv
63.6418 53.995 63.766 54.0129 63.8938 54.0129 cv
f
64.9305 53.594 mo
64.8094 53.456 64.6883 53.333 64.5625 53.219 cv
64.498 53.226 li
64.4004 53.244 64.3043 53.266 64.2082 53.29 cv
64.418 53.916 li
64.6199 53.842 64.7926 53.731 64.9305 53.594 cv
f
62.232 54.517 mo
61.9516 54.852 61.7371 55.223 61.6023 55.618 cv
61.7547 55.634 61.916 55.646 62.0836 55.649 cv
62.0871 55.256 62.1402 54.876 62.232 54.517 cv
f
62.4242 57.591 mo
61.6363 57.819 li
61.6379 57.823 li
61.7133 58.003 li
61.7371 58.057 li
61.8086 58.213 61.8949 58.365 61.9941 58.512 cv
62.1527 58.747 62.3383 58.954 62.5418 59.139 cv
62.5441 59.139 li
62.6875 59.017 62.8422 58.894 63.0176 58.778 cv
62.7801 58.415 62.5789 58.017 62.4242 57.591 cv
f
64.2332 58.438 mo
63.943 58.57 63.6762 58.713 63.4348 58.86 cv
63.8168 59.377 64.2762 59.8 64.7773 60.104 cv
64.8016 60.106 li
64.8059 60.106 li
64.827 60.108 li
64.8672 59.948 64.9305 59.795 65.0199 59.654 cv
64.7352 59.299 64.4695 58.891 64.2332 58.438 cv
f
63.1863 59.022 mo
63.0336 59.124 62.8977 59.228 62.7742 59.333 cv
63.1684 59.635 63.6219 59.853 64.1027 59.982 cv
63.7664 59.709 63.4563 59.389 63.1863 59.022 cv
f
62.0934 55.946 mo
61.8898 55.942 61.7 55.927 61.5176 55.904 cv
61.5148 55.914 li
61.3875 56.444 61.3926 57 61.5414 57.535 cv
61.5414 57.539 li
62.3324 57.308 li
62.1926 56.848 62.1145 56.391 62.0934 55.946 cv
f
65.3961 59.644 mo
65.5305 59.8 65.6695 59.9399 65.8102 60.067 cv
65.8215 60.0649 li
65.8676 60.056 li
65.8723 60.056 li
66.0379 60.022 li
66.1449 59.998 li
65.9063 59.284 li
65.7023 59.369 65.5305 59.494 65.3961 59.644 cv
f
67.1535 58.7939 mo
67.1473 58.997 li
67.3238 59.0649 67.4879 59.162 67.6313 59.284 cv
67.8531 58.774 67.9766 58.189 67.9766 57.5649 cv
67.9734 57.533 li
67.6816 57.541 67.3734 57.568 67.0535 57.612 cv
67.1188 58.0229 67.1535 58.42 67.1535 58.7939 cv
f
66.7074 57.3669 mo
66.6457 57.057 66.5641 56.74 66.4625 56.418 cv
65.3652 56.738 li
65.6551 57.606 li
66.0121 57.508 66.3645 57.426 66.7074 57.3669 cv
f
64.5035 58.318 mo
64.7191 58.726 64.9582 59.093 65.2082 59.414 cv
65.3707 59.241 65.5754 59.101 65.8117 59.005 cv
65.4641 57.969 li
65.1273 58.074 64.8059 58.191 64.5035 58.318 cv
f
66.9988 57.32 mo
67.334 57.272 67.6563 57.245 67.9613 57.236 cv
67.9348 56.848 67.8613 56.449 67.7383 56.049 cv
66.7465 56.337 li
66.8508 56.671 66.9363 57 66.9988 57.32 cv
f
65.7508 57.889 mo
66.0941 58.916 li
66.2273 58.889 66.3578 58.87 66.4883 58.87 cv
66.6121 58.87 66.734 58.883 66.8543 58.906 cv
66.8566 58.7939 li
66.8566 58.437 66.8246 58.057 66.7609 57.658 cv
66.4316 57.716 66.0934 57.791 65.7508 57.889 cv
f
64.9426 53.173 mo
65.1195 53.358 li
65.2227 53.144 li
65.0109 53.144 li
65.0168 53.167 li
64.9426 53.173 li
f
64.8582 55.228 mo
65.1949 55.127 65.5145 55.012 65.8156 54.887 cv
65.6031 54.49 65.3676 54.133 65.1207 53.821 cv
64.9543 53.982 64.7484 54.111 64.5133 54.197 cv
cp
f
67.6465 55.767 mo
67.4926 55.344 67.2945 54.954 67.0566 54.601 cv
66.8027 54.754 66.5254 54.8979 66.2234 55.033 cv
66.382 55.356 66.5266 55.697 66.6527 56.056 cv
cp
f
65.2707 56.457 mo
66.3676 56.1379 li
66.2441 55.791 66.1059 55.462 65.9523 55.152 cv
65.6375 55.281 65.3031 55.403 64.9531 55.508 cv
cp
f
64.9863 56.539 mo
64.668 55.591 li
64.3145 55.687 63.9684 55.764 63.632 55.821 cv
63.6953 56.158 63.7832 56.504 63.8945 56.855 cv
cp
f
64.573 55.308 mo
64.227 54.275 li
64.116 54.296 64.0047 54.31 63.8941 54.31 cv
63.7609 54.31 63.6285 54.295 63.5 54.267 cv
63.4957 54.475 li
63.4957 54.806 63.5258 55.16 63.5805 55.528 cv
63.9043 55.473 64.2355 55.401 64.573 55.308 cv
f
63.3375 55.866 mo
63.0074 55.9109 62.6895 55.937 62.3895 55.945 cv
62.409 56.362 62.484 56.792 62.6176 57.224 cv
63.6102 56.937 li
63.4957 56.575 63.4039 56.216 63.3375 55.866 cv
f
65.0793 56.82 mo
63.9883 57.137 li
64.1023 57.459 64.2316 57.766 64.3719 58.057 cv
64.6848 57.922 65.0203 57.8 65.3719 57.692 cv
cp
f
62.7105 57.508 mo
62.8574 57.908 63.0453 58.28 63.2664 58.616 cv
63.5199 58.4609 63.798 58.312 64.0992 58.174 cv
63.9539 57.872 63.8199 57.553 63.7039 57.22 cv
cp
f
66.8027 59.767 mo
66.7609 59.785 li
66.7074 59.807 li
66.7047 59.807 li
66.6152 59.847 66.5219 59.883 66.4301 59.913 cv
66.4254 59.914 li
66.4254 59.915 li
66.1844 59.988 li
66.1496 59.998 li
66.1453 59.998 li
66.0383 60.022 li
65.8723 60.056 li
65.8676 60.056 li
65.8219 60.0649 li
65.8102 60.067 li
65.5727 60.099 li
65.5305 60.105 li
65.5008 60.108 li
65.4289 60.111 li
65.1785 60.122 li
65.1309 60.122 li
65.1066 60.124 li
65.0137 60.122 64.9203 60.115 64.827 60.108 cv
64.8082 60.106 li
64.8016 60.106 li
64.7773 60.104 li
64.6113 60.087 64.4457 60.064 64.2844 60.028 cv
64.1027 59.982 li
63.6219 59.853 63.1684 59.635 62.7742 59.333 cv
62.7648 59.326 li
62.6246 59.209 li
62.5457 59.142 li
62.5441 59.139 li
62.5418 59.139 li
62.3387 58.954 62.1531 58.747 61.9941 58.512 cv
61.8949 58.365 61.8086 58.213 61.7371 58.057 cv
61.7133 58.003 li
61.6379 57.823 li
61.6363 57.819 li
61.6023 57.73 61.5699 57.639 61.5453 57.548 cv
61.5445 57.543 li
61.5414 57.539 li
61.5414 57.535 li
61.3926 57 61.3875 56.444 61.5148 55.914 cv
61.5176 55.904 li
61.5395 55.813 61.5668 55.724 61.5949 55.636 cv
61.6023 55.618 li
61.7371 55.223 61.9516 54.852 62.232 54.517 cv
62.3605 54.365 li
62.4637 54.256 62.5758 54.151 62.6961 54.054 cv
62.8277 53.952 li
63.0582 53.79 li
63.0852 53.772 li
63.1152 53.753 li
63.1863 53.707 li
63.2609 53.666 li
63.3242 53.632 li
63.4859 53.553 li
63.5355 53.53 li
63.5922 53.504 li
63.6512 53.474 li
63.7422 53.437 63.834 53.404 63.9242 53.373 cv
63.9281 53.372 li
64.0207 53.342 64.1133 53.314 64.2055 53.29 cv
64.2082 53.29 li
64.3043 53.266 64.4004 53.244 64.498 53.226 cv
64.5625 53.219 li
64.6648 53.201 64.7668 53.189 64.8715 53.179 cv
64.9426 53.173 li
65.0168 53.167 li
65.0113 53.144 li
64.9012 52.739 li
64.227 52.784 63.552 52.98 62.9387 53.339 cv
60.9641 54.502 60.3629 56.92 61.5969 58.744 cv
62.3098 59.798 63.4773 60.421 64.7172 60.538 cv
64.7172 61.495 li
64.1355 61.495 li
64.1355 62.048 li
61.8281 62.048 li
61.8281 63.038 li
68.4336 63.038 li
68.4336 62.048 li
66.127 62.048 li
66.127 61.495 li
65.5449 61.495 li
65.5449 60.538 li
66.0105 60.497 66.475 60.386 66.9168 60.195 cv
66.8582 59.972 li
66.8246 59.847 li
66.8051 59.774 li
cp
.00155642 .267735 .72549 0 cmyk
f
65.8156 54.887 mo
65.5145 55.012 65.1945 55.127 64.8582 55.228 cv
64.5133 54.197 li
64.7484 54.111 64.9543 53.982 65.1203 53.821 cv
65.3676 54.133 65.6031 54.49 65.8156 54.887 cv
66.3676 56.1379 mo
65.2707 56.457 li
64.9531 55.508 li
65.3035 55.403 65.6375 55.281 65.9523 55.152 cv
66.1059 55.462 66.2441 55.791 66.3676 56.1379 cv
67.0566 54.601 mo
67.2945 54.954 67.4926 55.344 67.6465 55.767 cv
66.6527 56.056 li
66.5266 55.697 66.382 55.356 66.2234 55.033 cv
66.525 54.8979 66.8027 54.754 67.0566 54.601 cv
67.9617 57.236 mo
67.6563 57.245 67.334 57.272 66.9988 57.32 cv
66.9363 57 66.8508 56.671 66.7469 56.337 cv
67.7383 56.049 li
67.8613 56.449 67.9348 56.848 67.9617 57.236 cv
67.9766 57.5649 mo
67.9766 58.189 67.8531 58.774 67.6313 59.284 cv
67.4879 59.162 67.3238 59.0649 67.1473 58.997 cv
67.1535 58.7939 li
67.1535 58.42 67.1188 58.0229 67.0535 57.612 cv
67.3734 57.568 67.6816 57.541 67.9734 57.533 cv
67.9766 57.5649 li
66.8543 58.906 mo
66.734 58.883 66.6121 58.87 66.4883 58.87 cv
66.3578 58.87 66.2273 58.889 66.0941 58.916 cv
65.7508 57.889 li
66.0934 57.791 66.4316 57.716 66.7609 57.658 cv
66.8246 58.057 66.8566 58.437 66.8566 58.7939 cv
66.8543 58.906 li
65.2082 59.414 mo
64.9582 59.093 64.7191 58.726 64.5035 58.318 cv
64.8059 58.191 65.1273 58.074 65.4641 57.969 cv
65.8117 59.005 li
65.5754 59.101 65.3707 59.241 65.2082 59.414 cv
65.3652 56.738 mo
66.4625 56.418 li
66.5641 56.74 66.6457 57.057 66.7074 57.3669 cv
66.3645 57.426 66.0121 57.508 65.6551 57.606 cv
cp
63.9887 57.137 mo
65.0793 56.82 li
65.3719 57.692 li
65.0203 57.8 64.6852 57.922 64.3719 58.057 cv
64.2316 57.766 64.1027 57.459 63.9887 57.137 cv
63.2664 58.616 mo
63.0453 58.28 62.8574 57.908 62.7105 57.508 cv
63.7039 57.22 li
63.8199 57.553 63.9539 57.872 64.0992 58.174 cv
63.798 58.312 63.5199 58.4609 63.2664 58.616 cv
62.3895 55.945 mo
62.6891 55.937 63.0074 55.9109 63.3375 55.866 cv
63.4039 56.216 63.4961 56.575 63.6105 56.937 cv
62.6176 57.224 li
62.484 56.792 62.409 56.362 62.3895 55.945 cv
64.668 55.591 mo
64.9863 56.539 li
63.8945 56.855 li
63.7832 56.504 63.6953 56.158 63.6316 55.821 cv
63.9684 55.764 64.3145 55.687 64.668 55.591 cv
63.5 54.267 mo
63.6285 54.295 63.7605 54.31 63.8938 54.31 cv
64.0047 54.31 64.116 54.296 64.227 54.275 cv
64.573 55.308 li
64.2355 55.401 63.9043 55.473 63.5805 55.528 cv
63.5254 55.16 63.4961 54.806 63.4961 54.475 cv
63.5 54.267 li
64.9426 53.173 mo
64.8715 53.179 li
64.7668 53.189 64.6648 53.201 64.5625 53.219 cv
64.6883 53.333 64.8094 53.456 64.9305 53.594 cv
64.7926 53.731 64.6199 53.842 64.4176 53.916 cv
64.2082 53.29 li
64.207 53.29 li
64.1133 53.314 64.0207 53.342 63.9281 53.372 cv
63.9262 53.373 li
64.1324 53.9919 li
63.8938 54.0129 li
63.766 54.0129 63.6418 53.995 63.5211 53.964 cv
63.5355 53.803 63.5605 53.651 63.5922 53.504 cv
63.5355 53.53 li
63.4859 53.553 li
63.3242 53.632 li
63.2609 53.666 li
63.2328 53.858 li
63.0852 53.772 li
63.0582 53.79 li
62.8277 53.952 li
62.9457 54.041 63.0711 54.118 63.2086 54.174 cv
63.2035 54.2729 63.2016 54.372 63.2016 54.475 cv
63.2016 54.822 63.2305 55.192 63.2891 55.572 cv
62.9715 55.616 62.6691 55.641 62.3805 55.6479 cv
62.3859 55.072 62.4973 54.533 62.6961 54.054 cv
62.5758 54.151 62.4637 54.256 62.3605 54.365 cv
62.232 54.517 li
62.1402 54.876 62.0871 55.256 62.0836 55.649 cv
61.916 55.646 61.7547 55.634 61.6023 55.618 cv
61.5949 55.636 li
61.5668 55.724 61.5395 55.813 61.5176 55.904 cv
61.6996 55.927 61.8898 55.942 62.0934 55.946 cv
62.1145 56.391 62.1926 56.848 62.3324 57.308 cv
61.5414 57.539 li
61.5445 57.543 li
61.5453 57.548 li
61.5699 57.639 61.6023 57.73 61.6363 57.819 cv
62.4242 57.591 li
62.5789 58.017 62.7801 58.415 63.0176 58.778 cv
62.8426 58.894 62.6879 59.017 62.5441 59.139 cv
62.5453 59.142 li
62.6246 59.209 li
62.7648 59.326 li
62.7742 59.333 li
62.8977 59.228 63.0336 59.124 63.1863 59.022 cv
63.4563 59.389 63.7664 59.709 64.1027 59.982 cv
64.2844 60.028 li
64.4457 60.064 64.6113 60.087 64.7773 60.104 cv
64.2762 59.8 63.8168 59.377 63.4348 58.86 cv
63.6762 58.713 63.943 58.57 64.2336 58.438 cv
64.4695 58.891 64.7352 59.299 65.0199 59.654 cv
64.9305 59.795 64.8672 59.948 64.827 60.108 cv
64.9203 60.115 65.0137 60.122 65.1066 60.124 cv
65.1309 60.122 li
65.2234 59.896 li
65.4289 60.111 li
65.5008 60.108 li
65.5305 60.105 li
65.5727 60.099 li
65.8102 60.067 li
65.6695 59.9399 65.5305 59.8 65.3961 59.644 cv
65.5305 59.494 65.7023 59.369 65.9063 59.284 cv
66.1453 59.998 li
66.1473 59.998 li
66.1844 59.988 li
66.4254 59.915 li
66.4254 59.914 li
66.4281 59.913 li
66.1895 59.2 li
66.2887 59.18 66.3898 59.167 66.4883 59.167 cv
66.6102 59.167 66.7266 59.183 66.8406 59.21 cv
66.8246 59.413 66.7969 59.604 66.7609 59.785 cv
66.8027 59.767 li
66.8051 59.774 li
66.8145 59.813 li
66.9074 59.771 66.9953 59.724 67.082 59.676 cv
67.0992 59.557 67.1168 59.436 67.1289 59.311 cv
67.2266 59.358 67.3152 59.416 67.3988 59.481 cv
67.6602 59.303 67.8914 59.093 68.091 58.863 cv
68.2074 58.455 68.2715 58.019 68.2715 57.5649 cv
68.2684 57.53 li
68.459 57.533 68.6363 57.546 68.8055 57.563 cv
68.8332 57.468 68.8563 57.372 68.8754 57.274 cv
68.6809 57.249 68.4754 57.236 68.2566 57.233 cv
68.2305 56.818 68.1531 56.393 68.0227 55.967 cv
68.8055 55.74 li
68.7676 55.605 li
68.7121 55.458 li
67.9328 55.683 li
67.7699 55.235 67.5582 54.819 67.3063 54.443 cv
67.4723 54.335 67.6227 54.222 67.7617 54.106 cv
67.5262 53.916 li
67.4059 54.012 67.2785 54.108 67.1355 54.201 cv
66.8805 53.86 66.5887 53.56 66.277 53.302 cv
66.0516 53.238 65.8188 53.192 65.5793 53.167 cv
66.0633 53.462 66.5105 53.866 66.8832 54.358 cv
66.6422 54.502 66.3758 54.639 66.0891 54.769 cv
65.8551 54.333 65.5945 53.936 65.3188 53.594 cv
65.4129 53.46 65.4855 53.3149 65.5332 53.164 cv
65.4309 53.153 65.3277 53.146 65.2227 53.144 cv
65.1195 53.358 li
64.9426 53.173 li
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
66.8051 59.774 mo
66.8246 59.847 li
66.8145 59.813 li
cp
f
56.2883 85.249 mo
56.8508 85.495 li
56.7676 85.687 li
56.3996 85.528 li
56.3176 85.714 li
56.6871 85.872 li
56.6051 86.064 li
56.2367 85.903 li
56.1188 86.176 li
56.4867 86.337 li
56.4039 86.529 li
55.8383 86.2859 li
cp
.0285649 .0184329 .215763 0 cmyk
f
57.8668 86.012 mo
57.6719 86.097 li
57.5469 85.932 li
57.4742 85.932 li
57.4344 85.972 li
57.4344 86.028 li
57.4441 86.056 57.4781 86.118 57.5379 86.217 cv
57.6398 86.386 li
57.6875 86.535 li
57.6699 86.67 li
57.5082 86.858 li
57.4297 86.894 57.3406 86.897 57.243 86.864 cv
57.0621 86.7419 li
57.0195 86.685 56.9902 86.611 56.977 86.516 cv
57.182 86.4709 li
57.2023 86.583 57.2453 86.649 57.3102 86.673 cv
57.4094 86.67 li
57.4699 86.611 li
57.4664 86.529 li
57.384 86.38 li
57.298 86.245 57.2473 86.146 57.2328 86.084 cv
57.2328 85.9109 li
57.3809 85.747 li
57.6152 85.737 li
57.7551 85.826 li
57.8668 86.012 li
f
59.0152 86.378 mo
58.8324 86.476 li
58.7613 86.347 58.6641 86.265 58.5402 86.23 cv
58.4379 86.205 58.3402 86.217 58.25 86.266 cv
58.1594 86.319 58.1008 86.3979 58.0734 86.503 cv
58.0691 86.709 li
58.1668 86.876 li
58.3465 86.977 li
58.5203 86.987 li
58.718 86.908 li
58.8184 87.092 li
58.718 87.151 58.6266 87.182 58.5488 87.195 cv
58.4672 87.208 58.382 87.199 58.291 87.174 cv
58.1219 87.13 57.998 87.039 57.9184 86.903 cv
57.8414 86.766 57.8234 86.614 57.8668 86.446 cv
57.8953 86.337 57.9441 86.248 58.018 86.176 cv
58.0887 86.104 58.177 86.056 58.2844 86.028 cv
58.3887 86.003 58.4938 86.003 58.5984 86.03 cv
58.6898 86.055 58.7695 86.097 58.8426 86.156 cv
59.0152 86.378 li
f
59.191 86.205 mo
59.3984 86.251 li
59.1543 87.355 li
58.948 87.307 li
cp
f
59.6012 86.298 mo
60.207 86.415 li
60.1656 86.62 li
59.7715 86.5439 li
59.732 86.745 li
60.1277 86.822 li
60.0887 87.025 li
59.6949 86.947 li
59.6363 87.239 li
60.0328 87.314 li
59.9922 87.522 li
59.3898 87.406 li
cp
f
60.3559 86.443 mo
60.559 86.474 li
60.925 87.28 li
61.0352 86.5439 li
61.2488 86.577 li
61.0793 87.692 li
60.8766 87.663 li
60.5094 86.859 li
60.4 87.59 li
60.1875 87.558 li
cp
f
61.3551 86.589 mo
61.9738 86.658 li
61.9516 86.869 li
61.7469 86.847 li
61.6414 87.758 li
61.425 87.734 li
61.5293 86.822 li
61.3324 86.797 li
cp
f
62.0801 86.67 mo
62.2934 86.6899 li
62.1879 87.814 li
61.9766 87.793 li
cp
f
62.932 87.039 mo
62.7602 87.416 li
63.0559 87.436 li
cp
62.8422 86.734 mo
63.0598 86.747 li
63.4184 87.903 li
63.1973 87.889 li
63.1238 87.651 li
62.6645 87.619 li
62.5574 87.8459 li
62.3359 87.83 li
cp
f
64.0328 86.7939 mo
64.2523 86.796 li
64.2465 87.22 li
64.6234 87.224 li
64.6297 86.801 li
64.8441 86.802 li
64.8309 87.932 li
64.6145 87.93 li
64.6211 87.434 li
64.2438 87.428 li
64.2375 87.924 li
64.0199 87.922 li
cp
f
65.5945 86.972 mo
65.4895 86.976 65.4035 87.014 65.3348 87.089 cv
65.2656 87.163 65.2316 87.256 65.2367 87.3669 cv
65.2379 87.4919 65.2844 87.59 65.3766 87.66 cv
65.616 87.74 li
65.718 87.739 65.8031 87.699 65.8723 87.625 cv
65.9434 87.548 65.9781 87.458 65.973 87.348 cv
65.9727 87.24 65.9324 87.151 65.8613 87.078 cv
65.7859 87.005 65.6965 86.969 65.5945 86.972 cv
65.5914 86.762 mo
65.7508 86.758 65.8879 86.814 66.0059 86.925 cv
66.1238 87.038 66.1844 87.179 66.1895 87.345 cv
66.1926 87.509 66.1387 87.651 66.0297 87.767 cv
65.9191 87.882 65.784 87.944 65.6207 87.949 cv
65.4531 87.952 65.3117 87.8979 65.1969 87.785 cv
65.0824 87.6689 65.023 87.531 65.0199 87.369 cv
65.016 87.261 65.0398 87.1609 65.0891 87.071 cv
65.1379 86.978 65.2086 86.904 65.2988 86.849 cv
65.3891 86.7939 65.4855 86.764 65.5914 86.762 cv
f
66.4332 86.762 mo
66.6422 86.746 li
66.959 87.5129 li
67.166 86.709 li
67.3707 86.693 li
67.6426 87.806 li
67.4371 87.822 li
67.2629 87.119 li
67.0762 87.847 li
66.8875 87.86 li
66.6012 87.167 li
66.5266 87.889 li
66.3203 87.902 li
cp
f
67.6781 86.658 mo
67.8902 86.637 li
68.0094 87.76 li
67.798 87.785 li
cp
f
68.0957 86.6169 mo
68.2996 86.591 li
68.8777 87.261 li
68.7762 86.526 li
68.9902 86.495 li
69.1434 87.613 li
68.9398 87.643 li
68.3613 86.973 li
68.4605 87.709 li
68.25 87.739 li
cp
f
69.1898 86.4609 mo
69.4016 86.424 li
69.5883 87.537 li
69.3797 87.573 li
cp
f
70.2172 86.424 mo
70.0883 86.592 li
69.9 86.512 li
69.8355 86.547 li
69.8195 86.602 li
69.8484 86.651 li
69.8703 86.67 69.9293 86.706 70.0301 86.764 cv
70.1223 86.814 70.1809 86.847 70.2016 86.86 cv
70.3164 86.969 li
70.3668 87.09 li
70.3867 87.182 70.3699 87.262 70.3184 87.333 cv
70.2668 87.406 70.1918 87.451 70.0914 87.472 cv
69.8742 87.455 li
69.6891 87.302 li
69.8438 87.1609 li
70.0586 87.272 li
70.141 87.22 li
70.1625 87.14 li
70.1211 87.071 li
69.9762 86.98 li
69.8359 86.906 69.743 86.8459 69.6988 86.797 cv
69.6156 86.65 li
69.6641 86.435 li
69.8621 86.309 li
70.027 86.317 li
70.2172 86.424 li
f
71.3777 86.139 mo
71.2605 86.314 li
71.0664 86.245 li
71.0043 86.2859 li
70.993 86.34 li
71.0242 86.387 li
71.0484 86.405 71.1082 86.437 71.2117 86.487 cv
71.3078 86.532 71.3672 86.563 71.3875 86.576 cv
71.5105 86.673 li
71.5699 86.796 li
71.5934 86.886 71.5801 86.969 71.5328 87.043 cv
71.4871 87.115 71.4145 87.167 71.3148 87.193 cv
71.0969 87.188 li
70.9051 87.048 li
71.0504 86.897 li
71.2684 86.996 li
71.3496 86.9399 li
71.368 86.859 li
71.3207 86.789 li
71.1691 86.709 li
71.0266 86.642 70.9305 86.587 70.882 86.5439 cv
70.7902 86.401 li
70.8254 86.183 li
71.0168 86.046 li
71.182 86.043 li
71.3777 86.139 li
f
72.0207 86.094 mo
71.9969 86.509 li
72.2809 86.417 li
cp
71.8246 85.844 mo
72.0316 85.777 li
72.7883 86.719 li
72.5766 86.788 li
72.4207 86.592 li
71.9848 86.734 li
71.9672 86.983 li
71.7559 87.051 li
cp
f
72.5313 85.603 mo
72.7313 85.526 li
73.0684 86.386 li
73.3586 86.272 li
73.434 86.463 li
72.9426 86.655 li
cp
f
73.0938 85.383 mo
73.2883 85.291 li
73.6004 85.952 li
73.6719 86.0649 li
73.7457 86.101 li
73.8406 86.081 li
73.9176 86.015 li
73.9398 85.931 li
73.8887 85.7859 li
73.5891 85.149 li
73.782 85.056 li
74.0727 85.666 li
74.1188 85.767 74.1469 85.841 74.1543 85.887 cv
74.1422 86.032 li
74.0695 86.1689 li
73.9328 86.265 li
73.7184 86.306 li
73.5379 86.234 li
73.4895 86.194 73.4383 86.115 73.3828 85.9919 cv
cp
f
74.6422 84.788 mo
74.5527 84.979 li
74.35 84.939 li
74.2949 84.989 li
74.2918 85.045 li
74.3293 85.0859 li
74.3563 85.1 74.4203 85.123 74.5297 85.156 cv
74.6316 85.187 74.6949 85.209 74.7168 85.219 cv
74.8531 85.297 li
74.9297 85.409 li
74.9301 85.659 li
74.8957 85.738 74.8316 85.799 74.7367 85.84 cv
74.5203 85.868 li
74.3102 85.757 li
74.4313 85.5859 li
74.6613 85.652 li
74.7336 85.585 li
74.7395 85.501 li
74.6824 85.4399 li
74.5207 85.383 li
74.3699 85.339 74.2664 85.298 74.2121 85.2629 cv
74.1 85.135 li
74.1023 84.914 li
74.2715 84.75 li
74.4344 84.723 li
74.6422 84.788 li
f
75.5008 73.989 mo
77.0883 73.989 li
77.0883 72.271 li
75.5184 72.271 li
75.4324 71.882 75.2863 71.518 75.0922 71.187 cv
76.1863 70.093 li
74.9711 68.878 li
73.8984 69.951 li
73.5617 69.739 73.1906 69.581 72.793 69.496 cv
72.793 67.976 li
71.075 67.976 li
71.075 69.569 li
70.7156 69.679 70.3793 69.844 70.077 70.058 cv
68.8961 68.878 li
67.6816 70.092 li
68.9504 71.362 li
68.8043 71.644 68.6953 71.95 68.6246 72.271 cv
66.7793 72.271 li
66.7793 73.989 li
68.6418 73.989 li
68.7172 74.301 68.8277 74.599 68.9746 74.874 cv
67.6816 76.167 li
68.8965 77.382 li
70.118 76.1609 li
70.4094 76.361 70.7313 76.517 71.075 76.622 cv
71.075 78.284 li
72.793 78.284 li
72.793 76.695 li
73.1742 76.614 73.5309 76.465 73.8563 76.267 cv
74.9711 77.382 li
76.1855 76.167 li
75.0664 75.048 li
75.2621 74.725 75.4094 74.369 75.5008 73.989 cv
.00155642 .267735 .72549 0 cmyk
f
72.0371 74.573 mo
71.202 74.573 70.525 73.896 70.525 73.061 cv
70.525 72.226 71.202 71.549 72.0371 71.549 cv
72.8723 71.549 73.5488 72.226 73.5488 73.061 cv
73.5488 73.896 72.8723 74.573 72.0371 74.573 cv
72.0715 70.724 mo
70.8 70.724 69.7691 71.7859 69.7691 73.0959 cv
69.7691 74.405 70.8 75.467 72.0715 75.467 cv
73.343 75.467 74.3738 74.405 74.3738 73.0959 cv
74.3738 71.7859 73.343 70.724 72.0715 70.724 cv
.973083 .805478 .352758 .238712 cmyk
f
72.9305 73.08 mo
72.9305 73.535 72.5457 73.904 72.0715 73.904 cv
71.5969 73.904 71.2125 73.535 71.2125 73.08 cv
71.2125 72.624 71.5969 72.255 72.0715 72.255 cv
72.5457 72.255 72.9305 72.624 72.9305 73.08 cv
f
grestore
%ADOBeginSubsetFont: MBAAAA+URWPalladioL-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MBAAAA+URWPalladioL-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 49 /one put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 193 /Aacute put
dup 201 /Eacute put
def
/FontBBox {-11 -258 968 915} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 681 701 643 663] def
/StdHW [49] def
/StdVW [123] def
/StemSnapH [49 57] def
/StemSnapV [123 143] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
19 dict dup begin
/period <1C60D8A8C9B8707C54B62D1E06BC8793AC1C64C96C063C62AC0EFB4
5DBB48B58B82D0CCC07A8> |-
/one <1C60D8A8C9B7A73DC6117777DCDCF36CA7A6BD9869060AC148F7B185FA
C84E21D1ECA0C297AD9CD7655E32B4729A5AF4802049A5F2BDADC497150711CC
65B5A2E3D50EA8EFD6D5BDF1EF5E09151DA4ECE5455FF051F83A69DA5534E31E
75A500779FF31A7D0130A08F15D18C0F85CFE6461CD6B41503AF20C1B93F0E48
06ECEC9FFCF15FC660B0148BF6CF98CE7A> |-
/A <1C60D8A8C9B6FF868A38EC2B636CE12F67FB590C0FC6273739094AD68258
0B2AFAAB8D5CB1F501DE6161051E1552026119BCE98A2D5595DC48D8B89517A9
319EADF4E7FDF54CE64F154F67EBC650557613D89E06952E7979EE7CD35D95AB
9A75A5DAE3956577381560C4002B92998C14FA5C55B3C893EF922932B0DA704A
687F956F458AAAA1B460A4A4C715659329A39338B874916E18B2A03D1515F0F5
9F3D0B857AE1753C5AE0467E22EBFE4CEEB276B22DA5CEB4D1FB45C6A27DE4FF
9AE445115E014D4ED41CB80743> |-
/C <1C60D8A8C9B6079FEF90A25C2549229ED4A4AF7A54F7E9D59BB4C8D8FC96
DBA56C79A5853EB9311DB64D8FECB6F1CA43BFAE4BAFEBA0027201DC19E686FA
26EB8B6BF707EAC7144E5DAA6226572786430AB6CE9A2DDE983162A9115B589F
B7EC3B1CFC593A423BD346> |-
/E <1C60D8A8C9B7D8BE18C4074182FF407C3B3F63D87F08A9FAD785394C7856
6893D41D48BC5303A8BC04F72392BB0DF3984E423AE9C2832DBE2CEC35E1BCA0
67E2DD8953F5F5FAF37DEE687B2BC8EAB38446771B54813412F781BCC0329241
A81ADCAFCB2FC03D54928349EAF4DE1B0069AB0029A8C981BE573E45BB8D1FCD
28075C68F8CA0105D05FFD72E7D272F56B98A0FD88BA7EBB2EF9B9E1D7B8C5A2
81EFF191EDC8F6D3FE2F1DAE5C59393C67725A84AC27C62A7C11E482A71CB4C2
2141DDD97C12066285411B8A5EDE7E5BA08453CEC2D5F0F4FAC3A390EA4AEC32
E103EA9134EDA95F1ED32B2BE9AAA80D35AF13C52359D714E2264E0A4F0D73AF
A7612DF73DED2F31CD752045> |-
/I <1C60D8A8C9B7361F7D5373874D775BE5A20C9AD314BA4947F0A394C13587
DCD01B248966BC2F7A9A06DB830EA13E4A5611B9B0CFE9A99CFAA1457725871F
E1F53D030CB522629BD3B7EA0A0DB5A4C7E24623450BF282C7269731E75DA943
57BBF0535E08B4DBE0CC6218E23405A20D4D8D28B77871F5C0616430BB52D7EC
E50EAF9C> |-
/L <1C60D8A8C9B7D8BE6A40C97BB1C2DA5F58BC93A3F4581AE10A061F2B9C24
AB4F2769701A26C97EB463F316BD61493AA4C6AE0F8BDE275EB9BC8015179699
E99C616560DF8798F2A7FA19FA205D4AE08B89B38C77C0CD5AC9355FD8ADC9D6
3DC846E1C6880A0D53F75531A4E6CA7410D2934A9A627F739405A72FF73EEF0F
455A95720A322BDD901BC44BD67DC979D06266D96BC5F0CC69933E9010106A66
108610> |-
/M <1C60D8A8C9B5EE3172330AE13B8548D56C78038F2E01CED56DBB47257B2E
B483B326FC1B45BA83A50ACDD9B82618008A76EB7F13DCE608CA5C3DC5AF3AEB
660026BC2BA0B522C92F6BABB7D9A390FA416D6E2E723B720449AA2CDC2E4DD5
B449193DB0794D633E9E0DD573F0A713805DCE67B904A0E42CA6AB4E3B5FF7CC
C2FF5DE6091E1CE2DC76F1FFD9A6B7F084896EB050204EBABEC0B43D4F24160D
B49B9A6C00B38AF76898847300DA6F42DF329B560540624333F7E0BD62BD90FF
18BA519A5DBCC2FBE10FED0A824F7DA6E0C9A64FD7969F9802558CFDCBCAA5DC
A91542EB060CD2D35DB15757B0D4A0F094796717D9F64A8C73D36414396EE57A
6D9D14B72DD9924E8AFC909C5E535E997BEBB2BE6225C2D2BB4ACBBE9238D9AA
BD628874D70D1CC5599C6307E0DAA7382579C43863064788715840832CDA5F07
DB30419EF5DB6B22E61CFDA632475EDD6E5302776E420E3C00EBBD479847> |-
/N <1C60D8A8C9B6B41CC403CED4A03035D36742206997EAD79E013BC1433415
09AA815BBA408E4E724F5DF35DD62B254B44B9A53A9820C7E522A06E3EB67028
0D554C6EDB19F526B0B19B366AF27D66099C8F85A8626DC61F4CEB6A9B2165A4
90491F29132B93B25CDC1E9D75E77CEEF57FA4942B365F01DC3A88F82AB340A4
B1510569EE74AC00C8A9E42BE8A86C22A99D23090A1AE888081C23A52DC6CFDD
3EFEC820D760A660C52020D1AE899A6FB2359A64BE7AED1485A34A7C406F2AD2
5250D6793996805CDB8FF9183979A0BF4E0FB740A7960DC334B1> |-
/O <1C60D8A8C9B6B41C36F1128EC55BA5A1B008798EE579C4DC1736BCE1C6BA
7AC6AB2CC5A1F381B64874DE62FFC0973E5F31FAB583FC619545405CA9061148
51C84A987A828E3C8BED94B3A2F7D2041B1459BAF9FA42147194A3FE6C8AD15D
7041D063247534B0E27C55CEE7673EABEEEBF1E58301FA4EAA34E151> |-
/P <1C60D8A8C9B7D8BE16F71404CE4A717FFC987A752E9EEA9BCB1FD166D543
77DE66C9C427BD1161C071897044AEF3E7FF591881D420AB04130DC37FE6599D
5F6425F719B439416ECCDB241F95CCEEC1039D4ED2F8D3DC6C9322990B7E06C1
3F3E96E9BDB35E874613D9A79C2F59158B518587C489B33784B4E1DE2E57D204
3D54ADB15E37399650F837111CAD4E5D7C218DD7B0EC8E33754F0D436488EA0D
4F6B5CCE4145113F7D2F4E72FBC2F3D4B80553CE8B692A1A09274AA9C426D5D0
65843FD29FE0A1D5C033851A53A584BF7CAC93E6F67F3D421B1C270FDCF3F77A
37D9B09DAB> |-
/R <1C60D8A8C9B6079F6CB0D0F8A7D977EE9E3417B33E9E6E0D8C8EB389CB51
69CAD5AD7DE55E0895922419D9366AFCA66AA5AA6534BC3B36411238FF4AE45A
74AF0132D6092DCDD742A070E1F851DC4189BD77D8B962964F0CD35193B06786
DC55DBAABA94F99BC004B134C25F5C49EDD242499DB3C3E0CA4E297E2B06DE48
DB5541B4E2E3E827FEC1A0C9BF5EA677F6BBC02B5D73EC1528CD70B90BCB36A2
D587F245C33D5CDBED61595429B744AF202FC0CD6756B7EDD8B6485AF4FBA08B
966B1DCB786A044F1024801E1671FBC97E7ADC2A0180924C06D64F707EC8892E
E12A3E8F0D6A4BBA2E9D40AC925324D30095D294FE74C3FBEE3645C797BA1A25
53364980AC04CC2F4150B2> |-
/S <1C60D8A8C9B7D8BE9BA32B89753E6710ED4027395DB43B504FA2418D4954
4C98D93E8BB15D547BA70E392EE57F93DC2F05EAE690A9D216062C75C077C8C2
B08DF5486ABDE9E40CF4D5EC43347B3FE0D14719CF187B4596C18B7CEA5D81B0
02E4C815F90A518AED62CA54B3F7569CA209B85AED306B0F08ABBD28740CAF9D
81722D18F38D39504691360D041E2C8119F5> |-
/T <1C60D8A8C9B64EDF8B99FE206E53FA0E4D0C4E2D152EE4F5331BE883E1CC
5457969E08FAFD8C94E6D576570B8AFC7C1A7430E32DA486E7294407DD2BF943
1180CF24AF9C07E55D8461B897CCEB8E5A80F6355DFDFE15A9BA1F92C1CE6C08
C25B42957922DB09EDE6AE2F91505EC4B0D93B717874D8EBF9A2FC5A89BF0967
89411F8C493E910EEEB76336EBD448D721900ADCA678B14D711DCCD01464EA18
C7262C26557F92CC> |-
/U <1C60D8A8C9B6FF8678FEBB7897131874101873C91E415D2265358F251B81
A2EFD95F132D4CE3BDE00089A758FFE4BD19D0A64E3EDC709FA9ACAD536144BE
66E4FC0010FB2125C6D70D615C9D954797424A0B6F1573781ED67E388F2C1DA3
01D05F5BDEF7AECC6F5DA23AB7761BDFC2151D057FCF8D4661CD54E690A15F9F
497913847D0776CE02869A8E3D712C1C9B60A9657634C540576B257350B9A63F> |-
/V <1C60D8A8C9B6FF868A38EC2503389F738062AAE1A2DEB7FAA222DB5672DF
40FAC8BA83D517C6998754150F181A6D377013AEBFBFEF7DF2B067CB0124C132
924DD03965E8DB07FB1949A86BC112BF7108EB65FF5021C0B605A5D940E802FB
C39FF3299C4CEE4FDC0F27AC48CC333B9B7417AE6DBCBD5EED1E18F5AA0E74A2
3184294B9893ECA295B721542D46E94194466422A217D9A6462F698A5928ED33
1EF4ECAEBBA9C695FE> |-
/Aacute <1C60D8A8C9B6FF868A38EC2B636CE12F67FB590C0FC6273739094AD
682580B2AFAAB8D5CB1F501DE6161051E1552026119BCE98A2D5595DC48D8B89
517A9319EADF4E7FDF54CE64F154F67EBC650557613D89E06952E7979EE7CD35
D95AB9A75A5DAE3956577381560C4002B92998C14FA5C55B3C893EF922932B0D
A704A687F956F458AAAA1B460A4A4C715659329A39338B874916E18B2A03D151
5F0F59F3D0B857AE1753C5AE0467E22EBFE4CEEB276B22DA5CEB4D1FB45C6A27
DE4FF9AE445115E014D4ED41CB8078BA1612BFBE53C156003CCFB4E1F2F5AC19
E54C62DC69D1FB77F95949230264FA141> |-
/Eacute <1C60D8A8C9B7D8BE18C4074182FF407C3B3F63D87F08A9FAD785394
C78566893D41D48BC5303A8BC04F72392BB0DF3984E423AE9C2832DBE2CEC35E
1BCA067E2DD8953F5F5FAF37DEE687B2BC8EAB38446771B54813412F781BCC03
29241A81ADCAFCB2FC03D54928349EAF4DE1B0069AB0029A8C981BE573E45BB8
D1FCD28075C68F8CA0105D05FFD72E7D272F56B98A0FD88BA7EBB2EF9B9E1D7B
8C5A281EFF191EDC8F6D3FE2F1DAE5C59393C67725A84AC27C62A7C11E482A71
CB4C22141DDD97C12066285411B8A5EDE7E5BA08453CEC2D5F0F4FAC3A390EA4
AEC32E103EA9134EDA95F1ED32B2BE9AAA80D35AF13C52359D714E2264E0A4F0
D73AFA7612DF73DED2F31CD75201718E3ECF2864FE1755FD60A68C4F94C79D6D
AB0D8BDAC716E37E5C5C5721726E1BB> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TNCDKQ+URWPalladioL-Bold /MBAAAA+URWPalladioL-Bold findfont ct_VMDictPut
/TNCDKQ+URWPalladioL-Bold*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one 15{/.notdef}rp /A /.notdef /C 
/.notdef /E 3{/.notdef}rp /I 2{/.notdef}rp /L /M /N 
/O /P /.notdef /R /S /T /U /V 
106{/.notdef}rp /Aacute 7{/.notdef}rp /Eacute 54{/.notdef}rp]
TNCDKQ+URWPalladioL-Bold nf
TNCDKQ+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
121.185 58.987 mo
(E)sh
TNCDKQ+URWPalladioL-Bold*1 [9.56412 0 0 -9.56412 0 0 ]msf
129.087 58.987 mo
(SCUELA)
[6.43509 7.49687 8.03711 6.43509 6.43507 0 ]xsh
TNCDKQ+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
174.933 58.987 mo
(P)sh
TNCDKQ+URWPalladioL-Bold*1 [9.56412 0 0 -9.56412 0 0 ]msf
182.835 58.987 mo
(OLIT\311CNICA)
[8.55891 6.43509 4.311 6.97507 6.43509 7.49687 8.5589 4.31102 7.49687 0 ]xsh
TNCDKQ+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
254.43 58.987 mo
(N)sh
TNCDKQ+URWPalladioL-Bold*1 [9.56412 0 0 -9.56412 0 0 ]msf
264.987 58.987 mo
(ACIONAL)
[8.03711 7.49686 4.31104 8.5589 8.5589 8.03711 0 ]xsh
TNCDKQ+URWPalladioL-Bold*1 [9.96264 0 0 -9.96264 0 0 ]msf
122.985 75.7268 mo
(C)sh
TNCDKQ+URWPalladioL-Bold*1 [7.97011 0 0 -7.97011 0 0 ]msf
130.68 75.7268 mo
(\301LCULO)
[6.70482 5.37299 6.25508 6.70482 5.37299 0 ]xsh
TNCDKQ+URWPalladioL-Bold*1 [9.96264 0 0 -9.96264 0 0 ]msf
170.649 75.7268 mo
(V)sh
TNCDKQ+URWPalladioL-Bold*1 [7.97011 0 0 -7.97011 0 0 ]msf
178.902 75.7268 mo
(ECTORIAL)
[5.37299 6.25508 5.80513 7.14604 6.25508 3.60007 6.70482 0 ]xsh
%ADOBeginSubsetFont: OBAAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OBAAAA+CMSY10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMSY10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
def
/FontBBox {0 -250 943 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.0416667 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/bullet <1C60D8A8C9B7A73D8D0B3FCDAA7E46FB68E7B1A6E412E25369E4ABB
A70D277941C6A488EED866AD61E359C443EB0FEA5> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TNCDKR+CMSY10 /OBAAAA+CMSY10 findfont ct_VMDictPut
/TNCDKR+CMSY10*1 
[15{/.notdef}rp /bullet 240{/.notdef}rp]
TNCDKR+CMSY10 nf
TNCDKR+CMSY10*1 [10.381 0 0 -10.381 0 0 ]msf
230.203 75.7268 mo
(\017)sh
TNCDKQ+URWPalladioL-Bold*1 [9.96264 0 0 -9.96264 0 0 ]msf
240.751 75.7268 mo
(R)sh
TNCDKQ+URWPalladioL-Bold*1 [7.97011 0 0 -7.97011 0 0 ]msf
248.446 75.7268 mo
(ESUMENNO)
[5.373 5.373 6.7048 8.47812 5.37302 9.55774 7.14603 0 ]xsh
TNCDKQ+URWPalladioL-Bold*1 [9.96264 0 0 -9.96264 0 0 ]msf
303.598 75.7268 mo
(.1)
[5.45392 0 ]xsh
%ADOBeginSubsetFont: QBAAAA+URWPalladioL-Roma Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QBAAAA+URWPalladioL-Roma def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
def
/FontBBox {-15 -283 926 728} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 692 712] def
/StdHW [35] def
/StdVW [84] def
/StemSnapH [35 43] def
/StemSnapV [84 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/A <1C60D8A8C9B6FF868A38EC2516662D2F0B109DC41AC2A59E7180AB83A030
1E5DC37495F95EC1C302354011F6C316C9F143870691C53EBE0C7DB82C05DDF6
A3F036FE884047B5BE2FC2E6B11444908F01030DB29EDA26429507E8564F5F9B
AEEC1F0660535273F93F4A2CFAF79C00ABF5432DAA19732799D35D3FBD7965F2
51960F686DB30D3338ED7D695922759BB475E2BD6A717ED2506B82668DE98A01
23F0D9418BB6A74D341162335B51C59789967C75AD4E927144845E4151E136E6
2D> |-
/B <1C60D8A8C9B7D8BE69B3E9892B111FF6A70734F3B3B85F4CEAF4795256EE
2165C716760A95A3952EB2334DC532791ADB86EE950F88C18C6A2918F3525DC0
FEBDDCC4563609D6357E3AACE18574E70D5D1DB9227C3B5ABABE7D78235D326C
0E92D9A6914B1B0E1A3B82EE1B25A5BD7F0EA520D262D4A65CB740A11441C40D
C56DCF924AB92FAB32659DC0AC8E122C255789C4DB38DF6F6478C191BAE72558
3FCC63820A286FDC0C1911E3C651C985E29E265F7EF41CC98D740C36158035FE
CDC87EE9A97F2DF40F5C24B251B01FAEF75D69ECF7135FF0527F102D793C7ED9
8213A0576C769D3C759A4D211D4320CCAE5477E217E844DFF01B095CF65E699B
7D376FF80C24F1D96062CBA2498CDEB4CAB8F87BF966D850E8F20577F0C8A809
A91CE3> |-
/C <1C60D8A8C9B638183F62B3C8A86C65B9BB6F51B2808F316B8FC41E5A4A7B
6D94D0DF7F1D9128B79C6B69A59B04143943ED9FBB2BE7CA2932390A2F474016
1C8990139D910D26B1E47CA4846BD1291536CE63739D44E3435B057259D20518
A69883C1587D20EB1E4426B726> |-
/D <1C60D8A8C9B6FB5FADF89E6183639612061E1E33578B6D08DD3A43DC57E9
A6C21374285723D2B52E5D9B14BF9C925FD47C25B5E59C71EFD655B9E53B5CDC
E9D5B394A01724764A4B5E7953BC9AFA6303BBDC39E2B41E72E0878E3F5546BD
41002B79C1F450FF58AF266AAEA64006F484779BA93DFCB15F44D47DAFF4EAC9
ED575470E787B81C2391EA1DC841F77DC0B7CF1DC4F2EC0D27E485BBA587ECDA
034ECD0F17CE25191D9A376C68693E31CD5EA4C36A465794D7182377A6B5D927
26E4F784CBE4C198832E29913D669FB3697A66C6335975A6E77665708A6B2FC4
92FD2D82C90940A89BE87F348FD14726D0> |-
/E <1C60D8A8C9B7D8BE69B8F1116BFA0730853BDE4DE0BE01C56D090D86C6BE
01FF716F63284BC570C79981AD3C21BBB7EC8C0B965D0A76B7860234A736EFF2
693267E555A2281D95F1EC4925BCA484C86AA01306028048B7C3DDD68F8F49F4
0EC9FD686ECE2077D71ECD34C13B4DE67ED88FD1D7922453C68F5670A927EAA6
97AD896874DF4801E38BB174FC37D73F8374816E0FE5C7277D706EB7EA7BD890
9A9E6FA179EB14A796F1ED9027190C8D0761A576ACCD7CAEEC6D4B76A61BF01B
AE16243217C27427A94E75B7133E7286443CC1EDFFCD6591AC32090944A7AA4D
8F99F73F2EE0FAA10EEAB999D500236938D57167AD45E6B4B51386BD061A3D7F
282B718D5C64CAA2C6A24DAAEED8A8CE268359C15F76562FE44A5634909EB7E0
D625797C15A504362B34AB0480> |-
/I <1C60D8A8C9B81BEA11FA7D507053387E4946BC04815488DD4A7DB4A52237
F95D61CB4DBEA706FFD0AF46BF49346F1B94EB0664962B0AC2A78F217E1B560B
2B680C1D43032DB69F98675C938B94565871232959AB7C444500EB145CFC7F52
9E5F02D11C9299B4CFE8E0C87AE056B1D917AA602BF5016F43A1997069> |-
/M <1C60D8A8C9B5D4485F4AACDE92B5ED3069D22305405D54DE5A7BCA132926
C2632E3B939A2B60E7BBD1940782CAE96DE4F0BAF4081AFAD5C4ACD1C7ECF9D9
7A4C115DA1EA4169C9145CAE97BE0EB518CE73C321D3F437FD1E95EEE5FBB82F
D7758B10DCB3DE3849EEC6C4FE189116B0BBCA803C77AB6205508F6526DDDB84
A548D3724BA3576784BA6A31A0FA8417F8A1808AB203B21E6F45122BB8E1233D
190FA3E5BE160E08DB442033E88D4FAD513C407CECC94875E02C3AF9B77D55E8
F9785D8645C16D33DE36DDF976692B1167C2F09E8EA542DBB1D9DCFE3E7727E8
D19778B386148D9AF880CBCDF3974BDCD92A02A3F5631EA03EBD0D766BE986B2
09A762BFC5F1AD3E0F897F1775C0C3FC751DB792D2> |-
/N <1C60D8A8C9B6B278CF3FA7580133C2535AB697BB9E77BCAC1D303687C742
7AB4A5723F2ED40DE3B7E795F68AD6E24C276BC65AA75E5B2AFDD56815216C0D
D5D0CB8DB5C3B75272385461D74AA70750F463D177757F983CFD19B046000EC5
9D7DF1D1548888A76FBCD57586A0750BAF6136E2BACB539BF40FD4E65CBCAF1E
0140885EC8EA631E690959B70AF329E6454F25B75C20643BB9D776FAD74283AB
0ADB3937537EBCAE6A1E602B449A308DEA5FEE5663734A9C83396B0ED48C604A
E502FE60> |-
/O <1C60D8A8C9B6C769AE5DCC4E8B6EA0E84C6505BC78AF7BCC8AEFA323342C
5E6E8A8B46061FDC469DD90497F2371E62E22F70958F6E575E843E16DE00982A
CC0DA4E51B0A46A7A10DE3DF67C12C1B7BD1779E8018A2A5DFFE8D8001A1DF6D
AB15A40213DE31> |-
/R <1C60D8A8C9B651303E9550A2019C5784A3830712207C4D892D7CC4E71AFA
0C79DE963778C1C0269F0412361A9BD1114328F632F582B2FCC7C07CC153F7DF
E39A85C717DC1AB0D04082E97B930F7B0168BA712EACFDA6BBDFD39BCCEA89B3
5AF46ED015E2CF22C8A9EB1EEB9E526B641C91E025EFF4477AE4354AF6A8EF44
C6F1C077B4AFBAF6D79D525AA1391AC1130D534BF2DB73371AE60F69B6C6A45D
A7EA8A312AB1E39829D665A2A6EA8D9111B4C8ABFDF048BA1D7650EA332E93F7
C147F62ACE3B0E67B6718A8CDD770AE99F21AB6EF19602C73C247D4C764B579F
54F490F05E92D3401F32FF0C136F07C8BD4B34BCC0F8F9F7D3D6F7CC718EA178
A3E176F53B4C3DB3E3C0583ABBEE5AB3B09A418F2A224ED763FF61CC85> |-
/S <1C60D8A8C9B78E0565022D97E17C5CB11E466287FE5A907377A202899DB5
6FD2D91D0D044DA67C4C8BDD02C56808EC7283169FCAE9CAA686C84D3E7EDD43
A1E543B9A314F32591FB764918F3EBF7BD2DAF10F7F07F4173D295EEEB1BFF7C
20A2B69638EDD79A9DE8087EB91F6D9BC271BF567685D1796D930608F00EE298
FF21EC73F7C92BA943846A8337DCFC747484B5F174BB238A775FE5F68F9705F4
0658462C65CD8FBFFD280A94> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TNCDKS+URWPalladioL-Roma /QBAAAA+URWPalladioL-Roma findfont ct_VMDictPut
/TNCDKS+URWPalladioL-Roma*1 
[65{/.notdef}rp /A /B /C /D /E 3{/.notdef}rp /I 
3{/.notdef}rp /M /N /O 2{/.notdef}rp /R /S 172{/.notdef}rp]
TNCDKS+URWPalladioL-Roma nf
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
158.031 90.0729 mo
(C)sh
TNCDKS+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
165.6 90.0729 mo
(AMBIODECOORDENADAS)
[6.70482 8.02812 5.37299 3.18599 9.21597 6.66916 7.839 6.15585 6.76794 6.76794 5.81406 6.66916 
5.37299 7.11011 6.7048 6.66916 6.70483 0 ]xsh
gsave
358.371 86.6529 mo
404.071 86.6529 li
404.071 53.8202 li
358.371 53.8202 li
358.371 86.6529 li
clp
377.464 83.667 mo
377.504 83.667 li
377.504 83.748 li
375.639 83.748 li
375.639 85.006 li
377.005 85.006 li
377.005 85.0859 li
375.639 85.0859 li
375.639 86.344 li
377.504 86.344 li
377.504 86.425 li
375.598 86.425 li
375.557 86.384 li
375.557 83.708 li
375.598 83.667 li
cp
.631525 .551751 .554528 .300267 cmyk
f
.110922 lw
377.464 83.6671 mo
377.504 83.6671 li
377.504 83.748 li
375.639 83.748 li
375.639 85.0061 li
377.005 85.0061 li
377.005 85.086 li
375.639 85.086 li
375.639 86.3441 li
377.504 86.3441 li
377.504 86.425 li
375.598 86.425 li
375.557 86.3841 li
375.557 83.7081 li
375.598 83.6671 li
cp
@
380.26 85.009 mo
381.404 85.006 li
381.797 85.006 382.126 84.73 382.126 84.381 cv
382.126 84.028 381.797 83.748 381.404 83.748 cv
380.26 83.748 li
cp
380.181 85.083 mo
380.179 85.083 li
380.181 85.0439 li
380.183 83.712 li
380.223 83.671 li
381.404 83.667 li
381.846 83.667 382.206 83.987 382.206 84.381 cv
382.206 84.771 381.846 85.087 381.404 85.087 cv
380.26 85.087 li
380.26 86.425 li
380.179 86.425 li
380.179 86.384 li
cp
f
380.26 85.0091 mo
381.404 85.0061 li
381.797 85.0061 382.126 84.73 382.126 84.3811 cv
382.126 84.0281 381.797 83.748 381.404 83.748 cv
380.26 83.748 li
cp
380.181 85.0831 mo
380.179 85.0831 li
380.181 85.044 li
380.183 83.7121 li
380.223 83.6711 li
381.404 83.6671 li
381.846 83.6671 382.206 83.9871 382.206 84.3811 cv
382.206 84.7711 381.846 85.0871 381.404 85.0871 cv
380.26 85.0871 li
380.26 86.425 li
380.179 86.425 li
380.179 86.3841 li
cp
@
384.881 86.384 mo
384.881 86.425 li
384.801 86.425 li
384.801 83.708 li
384.874 83.683 li
386.743 86.259 li
386.747 83.708 li
386.747 83.667 li
386.829 83.667 li
386.829 83.708 li
386.824 86.384 li
386.752 86.408 li
384.881 83.833 li
cp
f
384.881 86.3841 mo
384.881 86.425 li
384.801 86.425 li
384.801 83.7081 li
384.874 83.6831 li
386.743 86.2591 li
386.747 83.7081 li
386.747 83.6671 li
386.829 83.6671 li
386.829 83.7081 li
386.824 86.3841 li
386.752 86.408 li
384.881 83.8331 li
cp
@
366.06 69.469 mo
367.702 69.469 li
369.652 69.469 371.537 68.671 372.829 67.21 cv
373.316 66.66 373.691 66.07 373.955 65.441 cv
374.275 64.68 374.435 63.839 374.435 62.918 cv
374.435 61.12 373.792 59.579 372.507 58.2939 cv
371.222 57.009 369.682 56.3669 367.884 56.3669 cv
366.061 56.3669 li
365.825 56.3669 365.634 56.175 365.634 55.9399 cv
365.634 54.433 li
365.634 54.197 365.825 54.005 366.061 54.005 cv
367.884 54.005 li
370.335 54.005 372.433 54.878 374.178 56.623 cv
375.054 57.499 375.711 58.456 376.145 59.4919 cv
376.58 60.528 376.796 61.671 376.796 62.918 cv
376.796 64.976 376.185 66.783 374.962 68.341 cv
373.199 70.587 370.447 71.83 367.591 71.83 cv
366.062 71.83 li
365.826 71.83 365.635 71.639 365.635 71.403 cv
365.632 69.897 li
365.632 69.66 365.824 69.469 366.06 69.469 cv
.986175 .843717 .450904 .512108 cmyk
f
390.425 60.879 mo
390.737 60.879 391.029 60.819 391.299 60.701 cv
391.57 60.582 391.808 60.418 392.013 60.2109 cv
392.217 60.003 392.378 59.7629 392.498 59.4919 cv
392.616 59.2209 392.675 58.929 392.675 58.6169 cv
392.675 58.313 392.616 58.026 392.498 57.754 cv
392.378 57.483 392.215 57.244 392.007 57.035 cv
391.8 56.828 391.559 56.664 391.289 56.545 cv
391.018 56.427 390.73 56.3669 390.425 56.3669 cv
388.448 56.3669 li
388.237 56.3669 388.066 56.195 388.066 55.984 cv
388.066 54.3879 li
388.066 54.176 388.237 54.005 388.448 54.005 cv
390.425 54.005 li
391.057 54.005 391.652 54.126 392.214 54.3669 cv
392.774 54.608 393.264 54.939 393.684 55.359 cv
394.104 55.778 394.434 56.269 394.675 56.83 cv
394.917 57.39 395.038 57.987 395.038 58.6169 cv
395.038 59.609 394.768 60.489 394.229 61.258 cv
394.109 61.429 394.155 61.666 394.328 61.784 cv
394.643 61.998 394.929 62.235 395.182 62.494 cv
395.524 62.844 395.812 63.224 396.046 63.637 cv
396.28 64.048 396.456 64.483 396.575 64.9399 cv
396.694 65.397 396.754 65.866 396.754 66.349 cv
396.754 67.099 396.609 67.806 396.319 68.4709 cv
396.029 69.136 395.638 69.717 395.143 70.215 cv
394.65 70.712 394.07 71.106 393.405 71.396 cv
392.741 71.685 392.033 71.83 391.283 71.83 cv
388.448 71.83 li
388.237 71.83 388.065 71.658 388.065 71.447 cv
388.066 69.851 li
388.066 69.64 388.238 69.469 388.449 69.469 cv
391.283 69.469 li
391.714 69.469 392.118 69.387 392.498 69.224 cv
392.877 69.06 393.205 68.837 393.484 68.555 cv
393.762 68.2729 393.983 67.942 394.146 67.563 cv
394.31 67.184 394.391 66.78 394.391 66.349 cv
394.391 65.926 394.31 65.525 394.146 65.146 cv
393.983 64.767 393.76 64.436 393.478 64.154 cv
393.195 63.872 392.865 63.65 392.486 63.486 cv
392.108 63.323 391.707 63.24 391.283 63.24 cv
388.448 63.24 li
388.237 63.24 388.066 63.07 388.066 62.858 cv
388.066 61.261 li
388.066 61.05 388.237 60.879 388.448 60.879 cv
cp
.0392157 .262394 .828092 0 cmyk
f
377.297 70.649 mo
377.297 55.186 li
377.297 55.0229 377.327 54.869 377.386 54.724 cv
377.445 54.579 377.529 54.453 377.637 54.345 cv
377.744 54.238 377.869 54.154 378.01 54.094 cv
378.151 54.035 378.307 54.005 378.477 54.005 cv
386.204 54.005 li
386.53 54.005 386.809 54.121 387.039 54.35 cv
387.27 54.581 387.385 54.859 387.385 55.186 cv
387.385 55.5129 387.27 55.792 387.039 56.022 cv
386.809 56.252 386.53 56.3669 386.204 56.3669 cv
379.659 56.3669 li
379.659 61.022 li
383.63 61.022 li
383.957 61.022 384.236 61.137 384.466 61.368 cv
384.696 61.599 384.811 61.876 384.811 62.203 cv
384.811 62.53 384.696 62.809 384.466 63.039 cv
384.236 63.269 383.957 63.384 383.63 63.384 cv
379.659 63.384 li
379.659 70.649 li
379.659 70.976 379.543 71.255 379.314 71.485 cv
379.083 71.716 378.804 71.83 378.477 71.83 cv
378.151 71.83 377.873 71.716 377.642 71.485 cv
377.411 71.255 377.297 70.976 377.297 70.649 cv
.0558175 .975219 1 .00531014 cmyk
f
365.713 76.7419 mo
366.679 76.7419 li
367.266 76.6899 367.701 76.114 367.644 75.458 cv
367.644 75.451 li
367.701 74.795 367.266 74.219 366.679 74.167 cv
365.713 74.167 li
cp
365.673 76.822 mo
365.633 76.783 li
365.633 74.126 li
365.673 74.0859 li
366.682 74.0859 li
367.315 74.139 367.789 74.754 367.725 75.454 cv
367.789 76.155 367.315 76.771 366.682 76.822 cv
cp
.631525 .551751 .554528 .300267 cmyk
f
370.259 74.0859 mo
370.3 74.0859 li
370.3 74.167 li
368.448 74.167 li
368.448 75.414 li
369.805 75.414 li
369.805 75.495 li
368.448 75.495 li
368.448 76.7419 li
370.3 76.7419 li
370.3 76.822 li
368.408 76.822 li
368.368 76.783 li
368.368 74.126 li
368.408 74.0859 li
cp
f
371.023 75.418 mo
372.157 75.414 li
372.548 75.414 372.874 75.14 372.874 74.795 cv
372.874 74.445 372.548 74.167 372.157 74.167 cv
371.023 74.167 li
cp
370.944 75.49 mo
370.943 75.49 li
370.944 75.453 li
370.947 74.131 li
370.987 74.09 li
372.157 74.087 li
372.596 74.087 372.955 74.404 372.955 74.795 cv
372.955 75.181 372.596 75.495 372.157 75.495 cv
371.023 75.495 li
371.023 76.822 li
370.943 76.822 li
370.943 76.783 li
cp
f
373.272 76.798 mo
373.263 76.822 li
373.175 76.822 li
373.199 76.766 li
374.366 74.11 li
374.438 74.11 li
375.606 76.766 li
375.63 76.822 li
375.541 76.822 li
375.533 76.798 li
374.403 74.227 li
cp
f
377.171 75.414 mo
377.17 75.414 li
377.307 75.414 li
377.697 75.414 378.023 75.14 378.023 74.795 cv
378.023 74.445 377.697 74.167 377.303 74.167 cv
376.172 74.167 li
376.172 75.418 li
cp
377.419 75.488 mo
377.658 75.6689 377.835 75.908 378.104 76.771 cv
378.12 76.822 li
378.036 76.822 li
378.023 76.795 li
377.741 75.87 377.566 75.681 377.291 75.495 cv
376.172 75.495 li
376.172 76.822 li
376.092 76.822 li
376.092 76.783 li
376.093 75.49 li
376.092 75.49 li
376.093 75.453 li
376.096 74.131 li
376.136 74.09 li
377.303 74.0859 li
377.746 74.0859 378.104 74.404 378.104 74.795 cv
378.104 75.147 377.805 75.439 377.419 75.488 cv
f
379.516 74.0859 mo
380.517 74.0859 li
380.517 74.167 li
379.516 74.167 li
379.516 76.822 li
379.435 76.822 li
379.435 74.167 li
378.425 74.167 li
378.425 74.0859 li
cp
f
380.754 76.798 mo
380.746 76.822 li
380.658 76.822 li
380.681 76.766 li
381.848 74.11 li
381.92 74.11 li
383.088 76.766 li
383.112 76.822 li
383.023 76.822 li
383.016 76.798 li
381.885 74.227 li
cp
f
383.654 76.783 mo
383.654 76.822 li
383.574 76.822 li
383.574 74.126 li
383.65 74.11 li
384.821 76.685 li
385.988 74.11 li
386.065 74.126 li
386.069 76.783 li
386.069 76.822 li
385.988 76.822 li
385.988 76.783 li
385.985 74.312 li
384.857 76.798 li
384.785 76.798 li
383.654 74.312 li
cp
f
388.764 74.0859 mo
388.805 74.0859 li
388.805 74.167 li
386.954 74.167 li
386.954 75.414 li
388.31 75.414 li
388.31 75.495 li
386.954 75.495 li
386.954 76.7419 li
388.805 76.7419 li
388.805 76.822 li
386.913 76.822 li
386.873 76.783 li
386.873 74.126 li
386.913 74.0859 li
cp
f
389.527 76.783 mo
389.527 76.822 li
389.447 76.822 li
389.447 74.126 li
389.519 74.102 li
391.375 76.658 li
391.379 74.126 li
391.379 74.087 li
391.459 74.087 li
391.459 74.126 li
391.455 76.783 li
391.382 76.807 li
389.527 74.251 li
cp
f
393.032 74.0859 mo
394.034 74.0859 li
394.034 74.167 li
393.032 74.167 li
393.032 76.822 li
392.951 76.822 li
392.951 74.167 li
391.941 74.167 li
391.941 74.0859 li
cp
f
394.436 75.454 mo
394.436 76.166 394.943 76.7419 395.562 76.7419 cv
396.186 76.7419 396.689 76.166 396.689 75.454 cv
396.689 74.743 396.186 74.167 395.562 74.167 cv
394.943 74.167 394.436 74.743 394.436 75.454 cv
394.355 75.454 mo
394.355 74.694 394.902 74.087 395.562 74.087 cv
396.226 74.087 396.769 74.694 396.769 75.454 cv
396.769 76.215 396.226 76.822 395.562 76.822 cv
394.902 76.822 394.355 76.215 394.355 75.454 cv
f
360.64 80.074 mo
360.693 80.704 360.279 81.257 359.722 81.308 cv
358.804 81.308 li
358.804 78.822 li
359.717 78.822 li
360.279 78.874 360.693 79.427 360.64 80.056 cv
cp
360.52 79.05 mo
360.314 78.805 360.032 78.656 359.726 78.632 cv
358.708 78.632 li
358.613 78.727 li
358.613 81.403 li
358.708 81.5 li
359.731 81.5 li
360.035 81.476 360.314 81.325 360.52 81.082 cv
360.751 80.805 360.864 80.433 360.831 80.069 cv
360.864 79.697 360.751 79.324 360.52 79.05 cv
f
361.561 78.822 mo
361.561 79.97 li
362.927 79.97 li
362.927 80.16 li
361.561 80.16 li
361.561 81.308 li
363.427 81.308 li
363.427 81.5 li
361.466 81.5 li
361.368 81.403 li
361.368 78.727 li
361.466 78.632 li
363.427 78.632 li
363.427 78.822 li
cp
f
365.898 78.822 mo
365.898 79.97 li
367.073 79.97 li
367.073 80.16 li
365.898 80.16 li
365.898 81.5 li
365.707 81.5 li
365.707 78.727 li
365.803 78.632 li
367.52 78.632 li
367.52 78.822 li
cp
f
369.006 81.308 mo
368.409 81.308 367.925 80.751 367.925 80.0649 cv
367.925 79.38 368.409 78.822 369.006 78.822 cv
369.6 78.822 370.086 79.38 370.086 80.0649 cv
370.086 80.751 369.6 81.308 369.006 81.308 cv
369.006 78.632 mo
368.305 78.632 367.733 79.276 367.733 80.0649 cv
367.733 80.857 368.305 81.5 369.006 81.5 cv
369.707 81.5 370.277 80.857 370.277 80.0649 cv
370.277 79.276 369.707 78.632 369.006 78.632 cv
f
371.007 79.974 mo
371.007 78.822 li
372.09 78.822 li
372.46 78.822 372.761 79.083 372.761 79.4 cv
372.761 79.715 372.463 79.97 372.094 79.97 cv
371.807 79.97 li
cp
372.95 81.374 mo
372.714 80.615 372.546 80.322 372.334 80.132 cv
372.695 80.039 372.952 79.741 372.952 79.4 cv
372.952 78.976 372.566 78.632 372.09 78.632 cv
370.914 78.634 li
370.818 78.731 li
370.814 81.5 li
371.007 81.5 li
371.007 80.16 li
372.061 80.16 li
372.309 80.331 372.484 80.516 372.766 81.439 cv
372.793 81.5 li
372.988 81.5 li
cp
f
376.116 81.5 mo
375.923 81.5 li
375.918 79.1689 li
374.889 81.443 li
374.716 81.443 li
373.683 79.1689 li
373.683 81.5 li
373.489 81.5 li
373.489 78.727 li
373.588 78.634 li
373.673 78.687 li
374.802 81.172 li
375.927 78.687 li
376.014 78.634 li
376.112 78.727 li
cp
f
379.082 81.5 mo
378.869 81.5 li
378.849 81.439 li
377.762 78.967 li
376.655 81.5 li
376.442 81.5 li
376.497 81.365 li
377.676 78.6899 li
377.848 78.6899 li
cp
f
381.614 80.744 mo
381.538 80.886 li
381.361 81.193 380.93 81.5 380.442 81.5 cv
379.738 81.5 379.166 80.857 379.166 80.0649 cv
379.166 79.276 379.738 78.632 380.442 78.632 cv
380.945 78.632 381.378 78.949 381.529 79.249 cv
381.595 79.391 li
381.388 79.391 li
381.361 79.344 li
381.23 79.087 380.85 78.822 380.442 78.822 cv
379.845 78.822 379.357 79.38 379.357 80.0649 cv
379.357 80.751 379.845 81.308 380.442 81.308 cv
380.859 81.308 381.23 81.0439 381.366 80.793 cv
381.396 80.744 li
cp
f
382.048 81.5 mo
382.241 81.5 li
382.241 78.6316 li
382.048 78.6316 li
cp
f
384.087 81.308 mo
383.49 81.308 383.006 80.751 383.006 80.0649 cv
383.006 79.38 383.49 78.822 384.087 78.822 cv
384.681 78.822 385.168 79.38 385.168 80.0649 cv
385.168 80.751 384.681 81.308 384.087 81.308 cv
384.087 78.632 mo
383.386 78.632 382.814 79.276 382.814 80.0649 cv
382.814 80.857 383.386 81.5 384.087 81.5 cv
384.788 81.5 385.358 80.857 385.358 80.0649 cv
385.358 79.276 384.788 78.632 384.087 78.632 cv
f
388.033 78.632 mo
388.029 81.403 li
387.932 81.499 li
387.855 81.46 li
386.088 79.024 li
386.088 81.5 li
385.895 81.5 li
385.895 78.727 li
385.995 78.632 li
386.07 78.67 li
387.838 81.108 li
387.843 78.632 li
cp
f
390.714 81.272 mo
390.711 80.16 li
391.754 80.16 li
392.1 80.16 392.382 80.409 392.382 80.715 cv
392.382 81.019 392.1 81.268 391.752 81.268 cv
cp
391.587 78.864 mo
391.936 78.864 392.22 79.111 392.22 79.418 cv
392.22 79.7209 391.936 79.97 391.587 79.97 cv
390.711 79.972 li
390.709 78.864 li
cp
392.062 80.025 mo
392.28 79.886 392.413 79.66 392.413 79.418 cv
392.413 79.005 392.042 78.672 391.587 78.672 cv
390.618 78.676 li
390.52 78.772 li
390.52 80.061 li
390.516 80.152 li
390.518 80.152 li
390.518 81.363 li
390.614 81.459 li
391.754 81.459 li
392.207 81.459 392.575 81.126 392.575 80.715 cv
392.575 80.409 392.366 80.139 392.062 80.025 cv
f
395.339 81.5 mo
395.128 81.5 li
395.106 81.439 li
394.019 78.967 li
392.912 81.5 li
392.699 81.5 li
392.754 81.365 li
393.932 78.6899 li
394.105 78.6899 li
cp
f
397.48 80.735 mo
397.48 81.15 397.009 81.5 396.453 81.5 cv
395.884 81.5 395.423 81.157 395.423 80.735 cv
395.423 80.6379 li
395.614 80.6379 li
395.614 80.735 li
395.614 81.051 395.988 81.308 396.453 81.308 cv
396.896 81.308 397.289 81.039 397.289 80.735 cv
397.289 80.462 396.891 80.316 396.47 80.159 cv
395.998 79.981 395.51 79.799 395.507 79.397 cv
395.507 78.974 395.931 78.632 396.453 78.632 cv
396.972 78.632 397.396 78.974 397.396 79.395 cv
397.396 79.493 li
397.202 79.493 li
397.202 79.395 li
397.202 79.08 396.866 78.822 396.453 78.822 cv
396.038 78.822 395.701 79.08 395.701 79.395 cv
395.701 79.66 396.093 79.808 396.51 79.963 cv
396.987 80.143 397.482 80.327 397.48 80.735 cv
f
397.981 81.5 mo
398.172 81.5 li
398.172 78.6316 li
397.981 78.6316 li
cp
f
401.113 80.744 mo
401.038 80.886 li
400.86 81.193 400.43 81.5 399.942 81.5 cv
399.239 81.5 398.666 80.857 398.666 80.0649 cv
398.666 79.276 399.239 78.632 399.942 78.632 cv
400.445 78.632 400.879 78.949 401.029 79.249 cv
401.096 79.391 li
400.887 79.391 li
400.86 79.344 li
400.73 79.087 400.35 78.822 399.942 78.822 cv
399.345 78.822 398.858 79.38 398.858 80.0649 cv
398.858 80.751 399.345 81.308 399.942 81.308 cv
400.359 81.308 400.73 81.0439 400.867 80.793 cv
400.896 80.744 li
cp
f
403.773 81.5 mo
403.561 81.5 li
403.538 81.439 li
402.451 78.967 li
401.344 81.5 li
401.132 81.5 li
401.189 81.365 li
402.365 78.6899 li
402.54 78.6899 li
cp
f
385.005 77.904 mo
384.646 78.231 li
384.55 78.319 384.425 78.3669 384.295 78.3669 cv
384.21 78.3669 li
384.425 78.1 li
384.523 77.976 384.673 77.904 384.831 77.904 cv
cp
f
394.813 77.904 mo
394.455 78.231 li
394.359 78.319 394.234 78.3669 394.104 78.3669 cv
394.019 78.3669 li
394.234 78.1 li
394.332 77.976 394.482 77.904 394.641 77.904 cv
cp
f
1 lc
358.613 82.5901 mo
403.773 82.5901 li
@
grestore
%ADOBeginSubsetFont: QBAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKS+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C3AD0946AA0A266E6027A08EF4F8B383A753ADFE
E9E11FBA69CC7> |-
/zero <1C60D8A8C9B7A73D39411EB989D5C60161441F10B2E73393E84CF24C7
395BC5D34161DF9BA82B2D67AF54D4BB948B343005101B386FC316B139CD6D8B
4E5F5E4A1FE7F70EB0C6CDF8AFDAF572BF0505D552D6E2B9CA0927BE29A7875E
AF292> |-
/one <1C60D8A8C9B7A73DC608352D722E57D2643C054EA4273C63B4EF228536
FDFD73233DFD497E80087B4F9BB3BAE019F7003F670BF3F1A3CEA49F4227D236
347C249C328781F9620B6BA609083D6BB1DA616EC119C6DA685475114200797C
88C86BDBE2EE17124CDC59218CCAF9317D62F35C5D884EA15A31BA784A2B> |-
/two <1C60D8A8C9B7A73DC63EBE13715B150044171139C9B84C967A7C446E70
6BD02668F4A8C23C866B43509D9B62B05B6888BA590DBFAB23A756C093B9B900
1B8DDCF0543C00F567ED55B8CB47B13F0DF5CB9DD5DA24CC17BC330BAB11105A
C900255685DBFA7F7FC8A04D40FA08B8CBFFBAE4662AB3C36C286A12A9395644
2743FA9AFC1892B8FCD33C8C1B3C> |-
/eight <1C60D8A8C9B7A73D3942EC0F378654158035544AAA14A63C9E623F93
09BF3EB2828A7B47942F87775E4AC44D6F5299D16A014DF46DC4FB3D70ABE9F5
15C369775E55430CE373E9F3EE67D0F8DE06E01EA11870FE0603CBBA73AA9F59
EA3D829B57016533222FA7AAA4C573C0B459ABE191C3A898F68606F55A338C1A
DC4584BED13D63EC8888A9809AD7E679A64954C279E7F43AA6776FD0BEECA0E3
A22299FBE8FF337FEAAF2CE579ECD2106EAD562F8456CE6C08F475C7005EC762
AE6A6DCF125E02> |-
/F <1C60D8A8C9B7EF322BCBA0D80752DB581571DB1924000A46FFEB4C64A5EA
F7028D6E8E0A34F71F4C476319B6E7FCCAC58DA98FF299F7442B8A4B14478B4F
2F7695D73897FF701BC797454604B7915967216AD8ABEE1213E0C6D66F6A653F
AAD049DF1D829DAF6B24986F83D91F33C7F07EBAA252E23B34A4AD224E4B627B
4CAE8A0ECCC7BD1B924E54947B239213A668992C52F3E2A716BB583D4B0A70DB
00B5C21B89AD66DDE9B6873D93803C03ED25752F782C2239D0159977692594DD
610675855F55987ADABC6D8DA7FF63F2D834B027DAE9B0CA30BA5EBF531C3B9B
5731026735DD8F01E89873> |-
/a <1C60D8A8C9B7A73DC608357115F4F2E08468E7D6965AAA50D2897860D0E3
401ECF294E34BEDF18F9AE067406B7F6529CF2A931CCF776220813698C577E3B
3A4A1D7B36A77EBDD465CEFBC4A0E9DE9DDB4E0E7B88989457D89182AA037846
DB6C0C50EBC669830A7833745E71EF637C18738F4CC120458158D73ADCE9DFE2
8EA11FDBE53A84A7FAFE0228206306A74000348B4532924C04B3C442E9BB8609
C0BE2FE2F2335746004B00E82E7D91889106FFBEFA6B1D258F823C2CBA810DCB> |-
/c <1C60D8A8C9B77FE24E589A4BC1FB0315B0D97F24CEE396AC4FFDB471B1C7
698F503058A7AB8D5AA1EBE4C4360355E365C13A2AD27BF180D78680661CEDDD
0A111127678C41C7A9FDBD391D5E314D69070C73F944997EB04198D29374582C
E00AC7ECA078C723> |-
/d <1C60D8A8C9B7D8BE9E0A9BD54295C2787BBC62BD6A326AF7CD237A27F0D7
1E5EF39D453BCA5464D71EE05AD905B77C7390543C4F5E10C19AB7E5E48B940A
482DEF4121928D0E8473132C0EF231567DEF3D7391FD2FF65C4323FD9A52F220
29CCF4FCC0D39447259A3E653FFFE8A9CCC1EF47C0104243CC72AF7CF07CE01B
1562A60F47FFED919C4952B7A43DCACF2DBAA35263169B3CA5670FE8A8BAD643
36CFF40606F6ECB748056198365687E867834AB95C52B50F21D6583C9457833F
DF9544E1963FCC56A50E80EE568340ABA6F40885C7654F4485551C563CCBC66D
D9D5728107195DCF05CD> |-
/e <1C60D8A8C9B75CBBDC5536C53A31CAE3790865F26AC145B3CA0AA9DF6992
DB1BF6A0AA0E1294DC48804C4FF1F6E58D2549C430A2F609624D6AB490E2740D
ECE523D0776C214C7FC15C2C1B547770AF5B560100BDA7D9D1EC8F361E38ED4A
9F345E6BF7AB93F12C0D5BD830F720114828317122AA48610C6A21C7B06A9B92
436BAF5A65DC392EA9399A4E08FC3F6BB10C59B2D5B0ABCABBA21E979F6CADAD
B442E4F8> |-
/i <1C60D8A8C9B849F243C9DC7C307B007BA0DB1C1C714770DCFA6C34B8ECF0
DCA7C5ED8A3CBE9061B92C8F3F843DBA5E480CB6A59BBA9D5EB3676D2A5694CE
515B0898B675FB5C6151953FEA993E7247A7A8D481C338811E83404DC55827F2
F39E99FC090716843C1A27ACB24C44AAA502A791120057732B2C265BD7A6A300
A15BF4CECE15A5E8D62B4D85DEB73554F91662> |-
/m <1C60D8A8C9B59575A96A8571DA6AA916F4C34689E621659B29E23932D5F9
1226059550D30959EFD5C7359CD84F64D6570359C716C17A152E1923F3293C50
8C9A0CF82E64B965CFE89FF0E4ED632580AFEFA00129A01EC1C2FA4369A7E7F1
F99F3C5402A1B426A69E693815A0033731A06D235BBC7B04A818D30BEE85D2A5
BED37DE7CC45DEDB63C30223B147C38006D6DFD2326FAC935E4573F472E66899
99C04861FFC561725F07E82DD223641EB8A033FC0458BD654BA673E4D0E22998
9A6C273007DA97136D20E406DD70C2ADE3F59F7D68E61EF6931976626E4F232B
416CC1581321D5E235C2D7D7B8EA095D7C201E6000A7556A2C48CF8A999C20BC
576085C71609B7DD579B1DE30CC9728ED15860F57AE4DF6FEE36E4EDDB042FD4
97D01AFD04BD117BC72BC1311F12D50BA3B9C0738596F667906536711AC871FC
8685C4A148E01032BE67C56E36793BFB5B93259C944E0BAAD472> |-
/n <1C60D8A8C9B7F51B67AD9A8FE0E4D5A1E4052D1347C2B2BC5DB6B5DE156A
6C24C720093F9EBE811E5355CFFD0F0CF8B4B5891201B8B062B2FEC5BAF11D9B
A5A610D052F44A3EC06ACA6EED3CA254C695201057E003D177A7F84C86409566
7793578B9207F9FB4A8ADECCBB7061EC357B62003F8B25D2336C0A40A851EB08
48A18A6DEAEADEB0457DD0D1F8EEB4667E651D9415BE975073F355BF0E31EF54
9D71791D4A1BD110A83ADC570EA9CA3F08EC0721ECC18C391C5E524A74455483
DA129504617E92F2C501B77359D05C778ED743452D95523E82409C> |-
/o <1C60D8A8C9B799EB5D34ABF6B2172F0AF3B604D9C5F8C6AEDA7EA13894CE
1E7EE8BC479839FCA9C7B5DEBDA476F63B13BE69E63A1B3ACEA07F810491605E
64299605D3E134B52C2A005E09947C124BCF6EF08AC0319E> |-
/p <1C60D8A8C9B7C2FB37FE6C191452A5183F05D11648C3753FC14D2771D744
24A3A8B7DD5A28EC83F3D1051C56F2D820C1A4A2A43CA3F4834FA036C9C743C0
98638936C326998A48301281BAE8FF9320DC77A3B46FE5B7EBB9AA51B398B66D
3DE749B9566ED0DF0079C3D0654A6B488FE415A479CEEF97845CEB13F0BFAFCC
B2F727D7A43777473E945BB997FE029C1E18D1D6E653C10AB0BA713D9CBBB8A4
000695782782140114B7FE35EF5E53127C1AFD3AE6211AF8ED705ED3C16A7ADB
694338F62A340C43B19D8245420F> |-
/r <1C60D8A8C9B73031520AF1E8338C42139CC91801B73BAFBCAA66E81D50A7
D70B3E3026F09FD1E5E3CBF9D99983215B1E045C2A5FDE9430A1BCF2935C777B
483D0CCFE4515DF42149E3DE9D285D13811B63E5AF855BF87EA1784DFCF78CE5
C7CCF8403A17AC05B097987C21FDD283C8DDACE4B4E251F198A1DE8B82270E04
3C2252D4A4BA24B30FF90F59DF6D7B54F3FC3422FEDB> |-
/s <1C60D8A8C9B713D4BC3C72C059606B1E1A89540595DA1BDB2E552548D4C9
E6CAB8BF5549E576AF4CB29F18CB1D4A64AF50E374F0210160BD1E8A1806360D
E6F914BB8B2824D689490EFF08A4E254AE8F33A92383569A48414E33C2557DA0
94271F726C6471A7C7EF58EACB43FD9ECCB2F87AAEDF91BADE135D849EDD1983
3451EE63BDE395255DBEA8B381A82FC8C9FEB58CCBDD0419CC1FACB7B05B16C7
EE7DECB9AFDCEE8197D1305AF6F39F59E883EAE2> |-
/t <1C60D8A8C9B824242125E7DAE84BE946E6D0B1D5F9023570BEFCBF91285E
4E2A998FD0C62627834E824A52AF119B03A46C3C80D768617639A04B5D26460C
5C062BEC1CF25FD8F0BAF39F209C2B1D91B3F5F34410ACC6D82989B2C027C2A4
E0E61681BE> |-
/aacute <1C60D8A8C9B7A73DC608357115F4F2E08468E7D6965AAA50D289786
0D0E3401ECF294E34BEDF18F9AE067406B7F6529CF2A931CCF776220813698C5
77E3B3A4A1D7B36A77EBDD465CEFBC4A0E9DE9DDB4E0E7B88989457D89182AA0
37846DB6C0C50EBC669830A7833745E71EF637C18738F4CC120458158D73ADCE
9DFE28EA11FDBE53A84A7FAFE0228206306A74000348B4532924C04B3C442E9B
B8609C0BE2FE2F2335746004B00E82E7D91889106FFBEFA6B1D258F823C2CBA8
10D3EDD166D53AA7B6B6F845A938609A61DB22281ACB1EC73340DE354321BD0B
B6B> |-
/oacute <1C60D8A8C9B799EB5D34ABF6B2172F0AF3B604D9C5F8C6AEDA7EA13
894CE1E7EE8BC479839FCA9C7B5DEBDA476F63B13BE69E63A1B3ACEA07F81049
1605E64299605D3E134B52C2A005E09947C124BCF6EF08AC031A97932FA66D82
9D0F4AAB61A0C1A59EF7DA6AD3888A8D93653667A605BE6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKS+URWPalladioL-Roma /Encoding get
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 56 /eight put
dup 70 /F put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 225 /aacute put
dup 243 /oacute put
pop
%ADOEndSubsetFont
/TNCDKS+URWPalladioL-Roma*1 
[45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 5{/.notdef}rp /eight 
8{/.notdef}rp /A /B /C /D /E /F 2{/.notdef}rp 
/I 3{/.notdef}rp /M /N /O 2{/.notdef}rp /R /S 
13{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 
3{/.notdef}rp /m /n /o /p /.notdef /r /s 
/t 108{/.notdef}rp /aacute 17{/.notdef}rp /oacute 12{/.notdef}rp]
TNCDKS+URWPalladioL-Roma nf
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
48.1859 108.388 mo
(Semestre2018-ADepartamentodeFormaci\363nB\341sica)
[5.22894 4.77004 8.79296 4.77004 4.22095 3.24904 3.7532 7.28089 4.97701 4.977 4.97699 4.97701 
3.32094 135.027 7.713 4.77008 5.98495 4.97702 3.93304 3.24902 4.97702 8.79294 4.77002 5.79599 
3.24905 7.94705 6.08392 7.26291 5.535 5.43607 3.93304 8.79294 4.97699 4.41901 2.89801 5.43604 
8.31595 6.08392 4.97699 4.22095 2.89801 4.41901 0 ]xsh
48.1859 114.422 mo
405.36 114.422 li
@
48.684 272.998 mo
405.356 272.998 li
405.356 143.76 li
48.684 143.76 li
cp
.0404968 .0310059 0 .0109863 cmyk
f
gsave
48.1858 272.998 mo
405.356 272.998 li
405.356 143.76 li
48.1858 143.76 li
48.1858 272.998 li
clp
.99628 lw
48.684 272.998 mo
48.684 143.76 li
.810547 .619141 0 .219971 cmyk
@
grestore
1 /0 /CSD get_res sepcs
1 sep
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 1.66376 -9.96264 0 0 ]msf
59.1449 168.334 mo
(En)
[6.08392 0 ]xsh
%ADOBeginSubsetFont: TAAAAA+PazoMathBlackboardBold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TAAAAA+PazoMathBlackboardBold def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) Diego Puga, 2000, 2002. Distributed under the GNU General Public License (http://www.gnu.org/copyleft/gpl.txt). As a special exception, permission is granted to include this font program in a PostScript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
def
/FontBBox {0 -3 786 692} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 692 709] def
/OtherBlues [330 330] def
/BlueScale 0.03963 def
/StdHW [20] def
/StdVW [95] def
/StemSnapH [20 30 42] def
/StemSnapV [95 107] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/R <1C60D8A8C9B6C4F5656E30FB7BE07F763CE279B77A98215089BFBDCEE861
2C7252BD3F97E64B3FD8D94C5691358549FDC2B08935C090C21C7FC8F9D6A988
62F40A7208A0D32D12997B13ECC625C464F757A5D1A3E91FBDC9DF26DB57A66A
1DBB36D7D252CC24EC9073D6F673BC53B45AE992B7348CDA86F453BA20773F61
F68AFD564DE057E97B51844C9E9987334CA03EC0EC73222CDB5E92285A954526
49E707CFEA5BE65BE49DB2AFDED6EEED1FFD3C8CD16B7FC49B494F3EADC146BA
23C10443DA386ECE0FA1D767A518217203EFFE65998BF236954723EC0ABAF893
8493DD2F02A7B57584DD91B0BB7F4BF5D8F204F0A12559758A8359A1A8DAB4D1
95084BBD13D144EF5A3D15EE1B7B2A20CA0575DC796AADAE0AC5F5AC867485FF
08C9E1E18AE536838CD4BC65190EC52998738C29DCF41A29D67475407367FE64
FB4C2E084909E1> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TNCDKT+PazoMathBlackboardBold /TAAAAA+PazoMathBlackboardBold findfont ct_VMDictPut
/TNCDKT+PazoMathBlackboardBold*1 
[82{/.notdef}rp /R 173{/.notdef}rp]
TNCDKT+PazoMathBlackboardBold nf
TNCDKT+PazoMathBlackboardBold*1 [9.96264 0 0 -9.96264 0 0 ]msf
73.527 168.334 mo
(R)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
81.6001 164.716 mo
(2)sh
%ADOBeginSubsetFont: QBAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKS+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B8707CDCB20DFD3393D1FCE7DAC15545EF017CF3DC9EE0
33E03C671A6E43BD0C4568824DEB> |-
/b <1C60D8A8C9B7924CC4AB90EFB641B4101544BD5C13FB0F8DE19A675B37D1
E1A5E97903497BD9FF012EF91795AAE9843DCEC4CD3A73988660134412CFA317
7E9663F39C17D19CB790F57D7FBBB2C02286607DC419B8E74743B18616B66CD4
1A56468BA4260B2ACC80038EA691523126761AA2A49EF8CEC1A43CBA2AA07FCF
555EA482B5DF244CD033B7> |-
/f <1C60D8A8C9B81F2C453350860B9A1DAF4FC9A35A5D72BF2EB5A9B3FB01D5
2982B935AAB23737F31026ADC0C73AEF61FF3684E5DD92F78C1FC2332A8F4874
18382174B89BF9EF69114432D870B2328135E647D57AAE0FE9B95BB533CE2192
BE953304DE3CD89930B08405D3F8974132DFED03F3105DE2CCC30D2C9991598D
3B72844A1AB18A8C3514F639D7B83116A30C5F20AE53B1EFE3> |-
/l <1C60D8A8C9B849F243C9DC7783CDA3590841B22A78B6C0214A9ECAD49C50
8588E8D13BA1DCBC79A0ABAD711FEB8747165715E839B378E58EBFBFC9ABBD08
1888662E60FD05C77F9B280C5819A0D244504BA687E8BFF52E79607667035E1B
48FF6E> |-
/u <1C60D8A8C9B7C054917A0714D350335B7AC24DE9CD2D3F8FFEB843BFD66E
B253E1DFAAE408E665D82FB861B09BD14E3E7F20FA5AEDC0E5771A10C4801F47
190B737653495898555CEE0BD331F4F0884CDAE8CC57BE55DB597BEB8A46CFA5
767F675155BD5EA130D4E846A20F300186B668CC44559325C60BEC31D264B873
AF1A7AFB3AB79D07FCB23D11037B4416D050799382A1D608F1B49DD2E1CA4954
9B792F80D5B0F7AD371164C1EE5770844EBDB94E53D65006B02350ECF3DFA98C
3041F3BD852F84> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKS+URWPalladioL-Roma /Encoding get
dup 44 /comma put
dup 98 /b put
dup 102 /f put
dup 108 /l put
dup 117 /u put
pop
%ADOEndSubsetFont
/TNCDKS+URWPalladioL-Roma*1 
[44{/.notdef}rp /comma /hyphen 2{/.notdef}rp /zero /one /two 5{/.notdef}rp 
/eight 8{/.notdef}rp /A /B /C /D /E /F 
2{/.notdef}rp /I 3{/.notdef}rp /M /N /O 2{/.notdef}rp /R 
/S 13{/.notdef}rp /a /b /c /d /e /f 
2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p 
/.notdef /r /s /t /u 107{/.notdef}rp /aacute 17{/.notdef}rp 
/oacute 12{/.notdef}rp]
TNCDKS+URWPalladioL-Roma nf
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 1.66376 -9.96264 0 0 ]msf
85.875 168.334 mo
(,elcambioacoordenadaspolareseslafunci\363n)
[4.98593 4.77003 5.39094 4.41899 4.977 8.79295 5.50793 2.89799 7.94725 7.46991 4.41901 5.43607 
5.43604 3.75319 6.08391 4.77005 5.79599 4.97701 6.08392 4.97699 6.74985 5.98499 5.43605 2.89801 
4.97699 3.75285 4.77005 6.7319 4.77003 6.71393 2.89801 7.46997 3.32092 6.00296 5.79602 4.41898 
2.89801 5.43607 0 ]xsh
%ADOBeginSubsetFont: SBAAAA+URWPalladioL-Ital Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SBAAAA+URWPalladioL-Ital def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 80 /P put
def
/FontBBox {-35 -276 741 733} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 471 491 692 712] def
/StdHW [38] def
/StdVW [78] def
/StemSnapH [38 43] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/P <1C60D8A8C9B7D8BE698E12398553FD67613C99187B997D79DCEE275AB082
8068A5F643FE79549A62E85E7C96D2376CD41D683F6C21675E79C56343D768E6
2188A5E0F0C977A7DC541BB702DF183F35B91B938795A4920E580A912433A42D
ADF6EEE89266F0B3D1723BB395852F09AC59B6FCF118357F743628243629E875
D0AEDD9658EE06DA5C9FC567FECD3AC69EA0819EDCC4AE0D08FC8764DD388DAE
549F9AAFA3726DC7E92F06F464BBFE5EDC6CD52530F185AD7127CEB732F1FF97
3BBC89A1C18934AEC3C15169> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TNCDKU+URWPalladioL-Ital /SBAAAA+URWPalladioL-Ital findfont ct_VMDictPut
/TNCDKU+URWPalladioL-Ital*1 
[80{/.notdef}rp /P 175{/.notdef}rp]
TNCDKU+URWPalladioL-Ital nf
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
162.33 192.436 mo
(P)sh
%ADOBeginSubsetFont: QBAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKS+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B8707CAD1BD6CC4A3D4A8A5F95B4121A9E986E4C549FE3
4AF8523B1CB11E0E108AE17AB2776162A50C612EDDC8B7107065454D6A5DBC2D
002416833F2942F6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKS+URWPalladioL-Roma /Encoding get
dup 58 /colon put
pop
%ADOEndSubsetFont
/TNCDKS+URWPalladioL-Roma*1 
[44{/.notdef}rp /comma /hyphen 2{/.notdef}rp /zero /one /two 5{/.notdef}rp 
/eight /.notdef /colon 6{/.notdef}rp /A /B /C /D 
/E /F 2{/.notdef}rp /I 3{/.notdef}rp /M /N /O 
2{/.notdef}rp /R /S 13{/.notdef}rp /a /b /c /d 
/e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u 107{/.notdef}rp 
/aacute 17{/.notdef}rp /oacute 12{/.notdef}rp]
TNCDKS+URWPalladioL-Roma nf
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
169.782 192.436 mo
(:)sh
TNCDKT+PazoMathBlackboardBold*1 [9.96264 0 0 -9.96264 0 0 ]msf
182.094 192.436 mo
(R)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
190.167 188.818 mo
(2)sh
%ADOBeginSubsetFont: OBAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKR+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9
CA66334C70459EFC1D8016D52F4ACC8D584A> |-
/arrowright <1C60D8A8C9B5EE310D75E4BB53DC02FA37EF400C5757DA6810E
A2B12BDC053A73FD6C53F135029B3F7A374A711103BA88B731E24F20B39AE334
7183461E46E354C1C98812EBD788BE39A2477C7CA652D7E626B0E06422F70438
3B24D50F9F5755EEB64CB749A1BB113F3301ABDA1CFA9DA7DBD164F5C9B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKR+CMSY10 /Encoding get
dup 32 /minus put
dup 33 /arrowright put
pop
%ADOEndSubsetFont
/TNCDKR+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 222{/.notdef}rp]
TNCDKR+CMSY10 nf
TNCDKR+CMSY10*1 [10.381 0 0 -10.381 0 0 ]msf
203.406 192.436 mo
( !)
[6.40771 0 ]xsh
TNCDKT+PazoMathBlackboardBold*1 [9.96264 0 0 -9.96264 0 0 ]msf
224.43 192.436 mo
(R)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
232.503 188.818 mo
(2)sh
%ADOBeginSubsetFont: UBAAAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /UBAAAA+CMR10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
def
/FontBBox {0 -250 721 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/parenleft <1C60D8A8C9B737EC27E43BF1977FE17AEB7DE778CD9D1D3D9164
F271727AA0A52834106DB6D5C2AAFD94AB31812D41894E82D13A11FDF4155F02
A6615144E05EE47C8795E8E89CE29B723AE08221B1DF3C5B4817E44D18CE1598
A5DC2F98DABB2ADE3D131ACFA2D3D56E> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TNCDKV+CMR10 /UBAAAA+CMR10 findfont ct_VMDictPut
/TNCDKV+CMR10*1 
[40{/.notdef}rp /parenleft 215{/.notdef}rp]
TNCDKV+CMR10 nf
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
177.495 206.782 mo
(\()sh
%ADOBeginSubsetFont: SBAAAA+URWPalladioL-Ital AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKU+URWPalladioL-Ital dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/r <1C60D8A8C9B7361F7796DBA02526C7A45F3ECC7C64247FA29CC37839C155
B4D7AEF7AF35E3616F076DEBD47DA05DC96C516C458C808A7A94C42AD50B50E1
0570C26C214231AA35BF3164E11ED1F2A562B5B7201472038089F44D12F5C021
082D5B0A4F8A2A1BC79E1E3054032231B6844F9DEBE6C73A24E51E0F5BFC78C5
EACD76D2C1474926638A70AD4FBC66AB0206DAC7336E3B5948845B41> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKU+URWPalladioL-Ital /Encoding get
dup 114 /r put
pop
%ADOEndSubsetFont
/TNCDKU+URWPalladioL-Ital*1 
[80{/.notdef}rp /P 33{/.notdef}rp /r 141{/.notdef}rp]
TNCDKU+URWPalladioL-Ital nf
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
181.671 206.782 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
185.775 206.782 mo
(,)sh
%ADOBeginSubsetFont: WBAAAA+PazoMath-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WBAAAA+PazoMath-Italic def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) Diego Puga, 2000, 2002. Distributed under the GNU General Public License (http://www.gnu.org/copyleft/gpl.txt). As a special exception, permission is granted to include this font program in a PostScript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 113 /theta put
def
/FontBBox {0 -11 703 711} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-18 0 482 482 692 711] def
/OtherBlues [-276 -276 -226 -226 410 432 646 646] def
/BlueScale 0.03963 def
/StdHW [20] def
/StdVW [65] def
/StemSnapH [20 38 42 50] def
/StemSnapV [65 76 88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/theta <1C60D8A8C9B77FE2B99E96E5B05AFC1CA0DE795B2D75AFE033890F0B
BC9280FBAFDD6A8EC9B7A1C65A9C4F550860403C938C10AFDC2CFD6C0C9F5863
BAC9B753CD1E00FF94E9C247F42E32ED1A9EFA3750CC7D728DCF99135FFB3723
E486C733E45815B006BADF77C76565E5607994B6E4C8DB3C4B35D0A17B5E062D
A60507D033911D5A58006D0D06B0AF0C32915745EC30D20D0D9EFDEB30075E5C
1DF2C041FBFA1982584619931742E1> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TNCDKW+PazoMath-Italic /WBAAAA+PazoMath-Italic findfont ct_VMDictPut
/TNCDKW+PazoMath-Italic*1 
[113{/.notdef}rp /theta 142{/.notdef}rp]
TNCDKW+PazoMath-Italic nf
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
190.05 206.782 mo
(q)sh
%ADOBeginSubsetFont: UBAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKV+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenright <1C60D8A8C9B737EC27E43BF1977FE17AF226302CB703517021A
0DB54938D38A906781CE143685A42358F6D26C1E58529BD5B1EB56AB64CAF397
16A9479AF082DEB3A49B0B9FF06175FD4C622795E8AFACAE24D77E337BE03FB9
9C4AAA689F9E967FCE15709E3204C4D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKV+CMR10 /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/TNCDKV+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]
TNCDKV+CMR10 nf
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
195.018 206.782 mo
(\))sh
%ADOBeginSubsetFont: OBAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKR+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/mapsto <1C60D8A8C9C4A6CECE728ED8254DC595D3E1F41AECEEF940033A745
96F549E5DE2C43E95B2C130E3D481B6076F74F0BA4BE16E4479E8F410> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKR+CMSY10 /Encoding get
dup 55 /mapsto put
pop
%ADOEndSubsetFont
/TNCDKR+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 21{/.notdef}rp /mapsto 200{/.notdef}rp]
TNCDKR+CMSY10 nf
TNCDKR+CMSY10*1 [10.381 0 0 -10.381 0 0 ]msf
203.28 206.782 mo
(7 !)
[.251953 6.40771 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
224.754 206.782 mo
(P)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
231.09 206.782 mo
(\()sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
235.266 206.782 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
239.37 206.782 mo
(,)sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
243.645 206.782 mo
(q)sh
%ADOBeginSubsetFont: UBAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKV+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E59
93F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5
497F9A03CF7F30718A4F8E51FE4C555962B834> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKV+CMR10 /Encoding get
dup 61 /equal put
pop
%ADOEndSubsetFont
/TNCDKV+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 19{/.notdef}rp /equal 194{/.notdef}rp]
TNCDKV+CMR10 nf
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
248.613 206.782 mo
(\)=\()
[7.03786 11.0878 0 ]xsh
%ADOBeginSubsetFont: SBAAAA+URWPalladioL-Ital AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKU+URWPalladioL-Ital dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B7A73DCED8C1E018DE595692F8F08FE1303C45A5C61B6D171E
628D8E57B17D9245E9E30360A8F24C1AF9B1F56D54D2BA982EB5CA1968214AF3
D6BCDCCD28ABFBBE1F9534C2941FD2DA273ADAD81031AED20A371327BAE05961
CF79667FF076BF8E7866D313DEECB8E9201716005EDE6595178FA4B73292F6FC
A27572E3912A5D41994B347B23E5889766A76432494F1077A901BAC111229F61
D9578EE79E560C99D655483C3091B54790A87005AEE2AEE4226B2437B3C26024
384D708418D1FCE33E2D5C9347F3260D4590> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKU+URWPalladioL-Ital /Encoding get
dup 120 /x put
pop
%ADOEndSubsetFont
/TNCDKU+URWPalladioL-Ital*1 
[80{/.notdef}rp /P 33{/.notdef}rp /r 5{/.notdef}rp /x 135{/.notdef}rp]
TNCDKU+URWPalladioL-Ital nf
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
271.185 206.782 mo
(x)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
276.387 206.782 mo
(,)sh
%ADOBeginSubsetFont: SBAAAA+URWPalladioL-Ital AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKU+URWPalladioL-Ital dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B7A73DB544E0E41D4E3B269A2A65316789C846A19D0DBED79C
19020D8DF43C8448FE746CD985993650892FFCBC1818ECAEA5A84AA7B849E5C5
81AC2EBCEF080E6DED02A5D7C0F0C5C23021186B810A92ABE5BCE6A162F8F82A
5CA3B54421A3E297C627259BE61CC32603D3D15301C3061E2E87D8502EE5F38B
CC7D506B1F95FC55E4625E370843B559B430AE83EE729A74E5A761CDFDDAEB9D
311B14F783DEDE368079DEE40794F55AE93371115801053D5C979E2843A8F726
8ED750F36EA8F8B7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKU+URWPalladioL-Ital /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
/TNCDKU+URWPalladioL-Ital*1 
[80{/.notdef}rp /P 33{/.notdef}rp /r 5{/.notdef}rp /x /y 134{/.notdef}rp]
TNCDKU+URWPalladioL-Ital nf
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
280.662 206.782 mo
(y)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
285.891 206.782 mo
(\))sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
290.039 206.782 mo
(,)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 1.66376 -9.96264 0 0 ]msf
59.1449 229.543 mo
(donde)
[6.08392 5.43606 5.796 6.08392 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
151.908 243.889 mo
(x)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
160.008 243.889 mo
(=)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
170.988 243.889 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
176.748 243.889 mo
(cos)
[4.41899 5.43607 0 ]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
190.959 243.889 mo
(\()sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
195.234 243.889 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
200.202 243.889 mo
(\))sh
%ADOBeginSubsetFont: QBAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKS+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B7EF3227737BFD5F437C615F098ED87F538F0E436BB066A363
6EECBA83B2F3B36B48BC45FE9133A62E466D39B7732876CCCA55073ACBAA1A33
466BA9D5AFC3721E98A88E402187FD5031470E0008676E577E066A8DFA63367A
14693BAE36DD75A63695C4252EB22F091E8B3828668A9D4D7A01B5107E0E1673
D3DB9D5DCA74AC8A4A7BA25BA65B620DAB69FED7B0DE62E2B67AB82C731D144A
AE8A7522A05CCF0EE4D244DEDE71> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKS+URWPalladioL-Roma /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
/TNCDKS+URWPalladioL-Roma*1 
[44{/.notdef}rp /comma /hyphen 2{/.notdef}rp /zero /one /two 5{/.notdef}rp 
/eight /.notdef /colon 6{/.notdef}rp /A /B /C /D 
/E /F 2{/.notdef}rp /I 3{/.notdef}rp /M /N /O 
2{/.notdef}rp /R /S 13{/.notdef}rp /a /b /c /d 
/e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u 3{/.notdef}rp 
/y 103{/.notdef}rp /aacute 17{/.notdef}rp /oacute 12{/.notdef}rp]
TNCDKS+URWPalladioL-Roma nf
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 1.66376 -9.96264 0 0 ]msf
224.277 243.889 mo
(y)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
249.873 243.889 mo
(y)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
257.865 243.889 mo
(=)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
268.854 243.889 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
274.614 243.889 mo
(sen)
[4.22095 4.77005 0 ]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
289.536 243.889 mo
(\()sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
293.811 243.889 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
298.779 243.889 mo
(\))sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 1.66376 -9.96264 0 0 ]msf
59.1449 265.408 mo
(para)
[5.98497 4.977 3.93304 0 ]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
81.6539 265.408 mo
(\()sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
85.8301 265.408 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
89.934 265.408 mo
(,)sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
94.209 265.408 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
99.177 265.408 mo
(\))sh
%ADOBeginSubsetFont: OBAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKR+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/element <1C60D8A8C9B64FAD2EF24E721610468584A112D0923431BA3EC693
BE35580F450CD295B0B0546AE9D4648D0638ADEAC6CCFCFF08E550ED15AFA5BE
13F6EB886728BD44B34633DDA2169D23411E4F2E5F9C670981218D25C9FB960B
A4919A64F279A2A368FC7CC64FB53080809AFCCE9B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKR+CMSY10 /Encoding get
dup 50 /element put
pop
%ADOEndSubsetFont
/TNCDKR+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 16{/.notdef}rp /element 4{/.notdef}rp 
/mapsto 200{/.notdef}rp]
TNCDKR+CMSY10 nf
TNCDKR+CMSY10*1 [10.381 0 0 -10.381 0 0 ]msf
106.215 265.408 mo
(2)sh
TNCDKT+PazoMathBlackboardBold*1 [9.96264 0 0 -9.96264 0 0 ]msf
116.016 265.408 mo
(R)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
124.089 261.79 mo
(2)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QBAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKS+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707CAD73D5E53952ADC2EA204BA5FB352F28ED07F0E
ED3343393FADFF48C0BE3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKS+URWPalladioL-Roma /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/TNCDKS+URWPalladioL-Roma*1 
[44{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two 
5{/.notdef}rp /eight /.notdef /colon 6{/.notdef}rp /A /B /C 
/D /E /F 2{/.notdef}rp /I 3{/.notdef}rp /M /N 
/O 2{/.notdef}rp /R /S 13{/.notdef}rp /a /b /c 
/d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
3{/.notdef}rp /y 103{/.notdef}rp /aacute 17{/.notdef}rp /oacute 12{/.notdef}rp]
TNCDKS+URWPalladioL-Roma nf
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 1.66376 -9.96264 0 0 ]msf
128.373 265.408 mo
(.)sh
.0404968 .0310059 0 .0109863 cmyk
%ADOBeginSubsetFont: MBAAAA+URWPalladioL-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKQ+URWPalladioL-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B8707C54DE5DBFA06F4D3805DC417576A09E93F70EDD69
9B8205AE5E906600387F401C14BD7BC20C41236281FC4C4ACE3D45BFE73A6C8A
A8B650ED5283218C> |-
/D <1C60D8A8C9B6B41CC78139492EBC21ABBD2A52235B5CE34016F4B8293D00
3754D5AB0430F539F625BC37A189809692A6670EB14A002A5EE307E63CD7D4FE
3B1ABD574BB359B25DB4472CD8C7577C8A8A47001538810F60B42EC3E4A9C520
14136AA8C30F08C2DDD794C67EA29B41C6D3921445F47A249AB0AF9F6580823F
350CE0CABB5F93673E5136147D67BB20317167552D361DD29CBF38D4AA3F8FF2
D85A1868F997CF5D6A65F24B4DD69F1FC247FD36830B9A4EE955C2DD8582768D
3E7CF237D8E71947583D769C56F630E8DF60B07550289076408B56B126EC35F5> |-
/F <1C60D8A8C9B7EF3225152A81707F9A23E24FF4B51224078A24D8A90AA0F1
8774B8B90875A49C3D231E2C4F271E907DC40E11ED5CED7E2F81FA7296445252
7ACB042A74CAFCD589E6F6BE8805E5FF4B63AAF7E1B860E498C4F7A07B6E2059
237CA46CB6FF05DE824E94ADEA22021FCE0E60AD218C3A6CC15CBA542772B956
C7A332133F0E16A7913AFD81DC8867495B973CA17FAB43E8FAD0B15C3BCC8AB7
D20A1A0B6147750D140DF037DBC1BB4D44A005112AC9E0D2C017AACD765DD2EC
1561E8E85FE866EC66AFAB3CCA61B5714FA3FFFA4F46EDE61E2B3987D668D38B
54845618AA0C> |-
/a <1C60D8A8C9B7A73DC63EBE579ADCF57413FA938FA6C45399D8D2D254CBBA
67DC6441595129AF11DF598226F58DC312D897F1DA8CA6E75BCEC2157D59974A
96E19FB35724551F9F1371D0E74DC9677D64C85A7B7D076F0F4E5E460D92151A
861513AB489A478D5637479F591654E533A72DE5BA97ECCB9970EA5C66CDC37B
2D33860AD80A4FC7AC734A6AFAB54C8201B58580AAF37B339AACD52A84CF455B
A6A9AAAD0DB7B69C33830F9194236137F6095F170498D21925FFEF1684C01915
4292F682B2E460A914D60DD669091F25BCB96F9E31AA620F> |-
/d <1C60D8A8C9B7D8BE9B886514813DC019F9D465410057134F3DF1C99A9B0C
50003926A3A7BD3B791DD1D36B61196B817489851AAA720896A56A3E1EFF199E
32F7B44AD72F85FD0BEA1E145202C25DC246341DCD072A65DB8772790719E968
A6C46FC94B77C28E0D4AF3044F3F5C40653E61F0C83A3A7E19A850961AE2E348
D4F692A865D4DE5EA74E2BDEC641EEE0FFD6594850CFEAE96B85D60E769FA241
3E06F0F5269861770BDD9D592E2662CB4D60C6D09300CCE74600B094F5A3F1A0
F1D6D03B38A2630364F7EB158762979347EE4D133D0A1624590F3D0CC62A0BBF
2369369F640B1347ABECF877> |-
/e <1C60D8A8C9B7A73D34356C4F99A96DB5686DD7243255F35E100C238ACF38
E0282B2C205CBA03B0F70158CC7CF4E30545B4667A78CBE037437E8E6E4A8DB5
FCB94C48E4189D01511F3C5224C9649DC31B259C62BF529C80E3C53F9EE1A8AE
8BC5A78C64DFB0982C6EF52016027A4E53E9C2EAE524A3E511D0D48E6336EC75
0BB77E2CC6> |-
/l <1C60D8A8C9B81F2C452A0E20E4027044D6C9A3F9D4FCBF01DABDBCE1D872
10434B6ABD9BB14DD5D877A4FDF02A305EB8655A7CC651A13A47C3150096DB1D
DF5D48D7CB2AB007A80178E5DBA140FEFB1560375ABE1CD7299DDE> |-
/n <1C60D8A8C9B7D8BE69A164BC541F20EB43E9100B2D4A336E288582237C53
0998171D6DC148F6DE371232FC0E4A71155B490EF00FA74219434ADE90644B8C
FF1F23D73BBBCC4236800B303C1091E56946DEACC143626BAECD25D568697BAD
D26F35AF5D31D35A00A00FFF29C9D32F310FFAC0BAE7FFE07580A6BD6D885489
0B7F94D6B66453C1DEA307C94C1B0C2B83929852C1D106006C3B016DC041BAB6
F664885FC83DF651285BF262D6FE2134E506B046D33D5A3A31BEC19FF595104C
58D3A07EAD23271E4CF3FD5FCCA94E08253037789B5609900C47AA24608B94C2
8FE2AA8BC6927A5CA0653B09> |-
/o <1C60D8A8C9B7EF32A6FF32573A372DB86884A4CC5AA390B50E08EE8D1C2A
7D93CFC37C22E91D722073C778467066CA01B30C43D67672639DE2EBE7BE71F0
3FFAB41C4BC081A51A969EAC10EEF9C27B881A2A774BF00C1B> |-
/p <1C60D8A8C9B7D8BE1ACB2CC96D17C0D13D4BE3E526162788A7476E8F5541
50C97CAA596B020AEE889E0C14C721CC7D14F8A09DFB9F7BB613B2E43D5938AB
B9F062B626A13F710A902632BC8381F5E4D36F832D44AB2E83E93FD40CA4FEED
A77555ADF7C08024173CA486A10868D7ACAE887E5DC38B2DA4F00596135F9227
9F65EB9CA5D5A671B48A09D9F33573B0981C243E2B3D38A321BCB810AF38BEC2
342309C3503661592D2E02A2DB4C7B624D8A34C21F619B7C76AFF21872AF4823
E7040F9E400E978B07033DF5C7B664B57EC083885D26> |-
/r <1C60D8A8C9B7361F7D5006333BEFE2F6EFE286C90F1DE638957ECBF614F1
3DA29E68548982ACF70AE163B7274CD58993B66C9C44E4D87F5660D133B16F98
8D3899639C66FFF5B72CA4C94989C57CE680BFA61DD875ADEC8A75210D56B692
E85520E9B23BD590449BC402545C72613EF9C0B47834EDE45F49473B0798B2B5
DA17FA26EB5A2B000E72B4E29E675BE5DF> |-
/s <1C60D8A8C9B77FE243B28A82B2251ECBBA25F935D7E7AE8FE1A7F5D21FE4
804FF87271027A97AD4972BD88810839B630A4DA42AE35842A4B2C9D1B62C269
5711627CD44C08F7E2DA17821EDFAAECD055115315ACEC134BE778404B920AD6
673153A97427E9A145C0B886259A802C1177D9BA801E54DA595D8E56B2A81F69
771DC1C0> |-
/Oacute <1C60D8A8C9B6B41C36F1128EC55BA5A1B008798EE579C4DC1736BCE
1C6BA7AC6AB2CC5A1F381B64874DE62FFC0973E5F31FAB583FC619545405CA90
6114851C84A987A828E3C8BED94B3A2F7D2041B1459BAF9FA42147194A3FE6C8
AD15D7041D063247534B0E27C55CEE7673EABEEEBF1E58301FA4EAA34E170657
1C21B64257393138D5FA2B7D7BB58A9D5CC391005BF597E7D62BAF592D8C1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKQ+URWPalladioL-Bold /Encoding get
dup 58 /colon put
dup 68 /D put
dup 70 /F put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 211 /Oacute put
pop
%ADOEndSubsetFont
/TNCDKQ+URWPalladioL-Bold*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one 8{/.notdef}rp /colon 6{/.notdef}rp /A 
/.notdef /C /D /E /F 2{/.notdef}rp /I 2{/.notdef}rp 
/L /M /N /O /P /.notdef /R /S 
/T /U /V 10{/.notdef}rp /a 2{/.notdef}rp /d /e 
6{/.notdef}rp /l /.notdef /n /o /p /.notdef /r 
/s 77{/.notdef}rp /Aacute 7{/.notdef}rp /Eacute 9{/.notdef}rp /Oacute 44{/.notdef}rp]
TNCDKQ+URWPalladioL-Bold nf
TNCDKQ+URWPalladioL-Bold*1 [9.96264 0 0 -9.96264 0 0 ]msf
65.6066 150.133 mo
(D)sh
TNCDKQ+URWPalladioL-Bold*1 [7.97011 0 0 -7.97011 0 0 ]msf
74.4085 150.133 mo
(EFINICI\323N)
[5.37299 4.42799 3.60019 7.14603 3.60006 6.25508 3.60005 7.14604 0 ]xsh
TNCDKQ+URWPalladioL-Bold*1 [9.96264 0 0 -9.96264 0 0 ]msf
125.115 150.133 mo
(1:Coordenadaspolares)
[5.2289 7.46992 7.19099 5.535 5.535 3.87907 6.08394 4.97699 6.08392 4.97701 6.08392 4.97699 
6.94809 6.08392 5.53499 3.32092 4.97701 3.87907 4.97701 0 ]xsh
61.0688 143.848 mo
61.0688 141.784 59.3953 140.11 57.3309 140.11 cv
55.2664 140.11 53.593 141.784 53.593 143.848 cv
237.572 143.848 mo
237.572 141.784 239.245 140.11 241.31 140.11 cv
243.374 140.11 245.048 141.784 245.048 143.848 cv
.486084 .37207 0 .53125 cmyk
f
55.9664 140.11 mo
242.674 140.11 li
242.629 140.118 li
241.089 140.397 239.584 141.869 239.268 143.404 cv
237.576 151.639 li
237.261 153.174 235.736 154.419 234.17 154.419 cv
64.4703 154.419 li
62.9047 154.419 61.3801 153.174 61.0645 151.639 cv
59.3723 143.404 li
59.0566 141.869 57.552 140.397 56.0113 140.118 cv
.162109 .124023 0 .0440063 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
TNCDKQ+URWPalladioL-Bold*1 [9.96264 0 0 -9.96264 0 0 ]msf
65.6066 150.133 mo
(D)sh
TNCDKQ+URWPalladioL-Bold*1 [7.97011 0 0 -7.97011 0 0 ]msf
74.4085 150.133 mo
(EFINICI\323N)
[5.37299 4.42799 3.60019 7.14603 3.60006 6.25508 3.60005 7.14604 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
TNCDKQ+URWPalladioL-Bold*1 [9.96264 0 0 -9.96264 0 0 ]msf
125.115 150.133 mo
(1:Coordenadaspolares)
[5.2289 7.46992 7.19099 5.535 5.535 3.87907 6.08394 4.97699 6.08392 4.97701 6.08392 4.97699 
6.94809 6.08392 5.53499 3.32092 4.97701 3.87907 4.97701 0 ]xsh
399.187 360.488 mo
49.6602 360.488 li
49.6602 282.441 li
409.552 282.441 li
409.552 350.124 li
399.187 360.488 li
50.0005 282.781 mo
50.0005 360.148 li
399.046 360.148 li
409.211 349.983 li
409.211 282.781 li
50.0005 282.781 li
/1 
<<
/Name (Black)
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
.00590542 sep
f
399.046 360.148 mo
50.0005 360.148 li
50.0005 282.781 li
409.211 282.781 li
409.211 349.983 li
399.046 360.148 li
50.3402 283.122 mo
50.3402 359.808 li
398.905 359.808 li
408.871 349.842 li
408.871 283.122 li
50.3402 283.122 li
1 /1 /CSD get_res sepcs
.0157478 sep
f
398.905 359.808 mo
50.3402 359.808 li
50.3402 283.122 li
408.871 283.122 li
408.871 349.842 li
398.905 359.808 li
50.6804 283.462 mo
50.6804 359.468 li
398.764 359.468 li
408.531 349.701 li
408.531 283.462 li
50.6804 283.462 li
1 /1 /CSD get_res sepcs
.0354325 sep
f
398.764 359.468 mo
50.6804 359.468 li
50.6804 283.462 li
408.531 283.462 li
408.531 349.701 li
398.764 359.468 li
51.0207 283.802 mo
51.0207 359.128 li
398.623 359.128 li
408.191 349.56 li
408.191 283.802 li
51.0207 283.802 li
1 /1 /CSD get_res sepcs
.0688966 sep
f
398.623 359.128 mo
51.0207 359.128 li
51.0207 283.802 li
408.191 283.802 li
408.191 349.56 li
398.623 359.128 li
51.3609 284.142 mo
51.3609 358.787 li
398.482 358.787 li
407.851 349.419 li
407.851 284.142 li
51.3609 284.142 li
1 /1 /CSD get_res sepcs
.11614 sep
f
398.482 358.787 mo
51.3609 358.787 li
51.3609 284.142 li
407.851 284.142 li
407.851 349.419 li
398.482 358.787 li
51.7008 284.482 mo
51.7008 358.447 li
398.341 358.447 li
407.511 349.278 li
407.511 284.482 li
51.7008 284.482 li
1 /1 /CSD get_res sepcs
.159446 sep
f
398.341 358.447 mo
51.7008 358.447 li
51.7008 284.482 li
407.511 284.482 li
407.511 349.278 li
398.341 358.447 li
52.041 284.822 mo
52.041 358.107 li
398.2 358.107 li
407.17 349.137 li
407.17 284.822 li
52.041 284.822 li
1 /1 /CSD get_res sepcs
.183068 sep
f
398.2 358.107 mo
52.041 358.107 li
52.041 284.822 li
407.17 284.822 li
407.17 349.137 li
398.2 358.107 li
52.3813 285.162 mo
52.3813 357.767 li
398.059 357.767 li
406.83 348.996 li
406.83 285.162 li
52.3813 285.162 li
1 /1 /CSD get_res sepcs
.194879 sep
f
398.059 357.767 mo
52.3813 357.767 li
52.3813 285.162 li
406.83 285.162 li
406.83 348.996 li
398.059 357.767 li
52.7215 285.503 mo
52.7215 357.427 li
397.919 357.427 li
406.49 348.855 li
406.49 285.503 li
52.7215 285.503 li
1 /1 /CSD get_res sepcs
.200784 sep
f
397.919 357.427 mo
52.7215 357.427 li
52.7215 285.503 li
406.49 285.503 li
406.49 348.855 li
397.919 357.427 li
1 /1 /CSD get_res sepcs
.204721 sep
f
48.1859 356.293 mo
48.1859 280.967 li
405.356 280.967 li
405.356 347.556 li
396.619 356.293 li
0 0 .199951 .800781 cmyk
f
48.5844 355.894 mo
48.5844 281.366 li
404.958 281.366 li
404.958 347.39 li
396.454 355.894 li
0 0 .5 0 cmyk
f
404.958 347.39 mo
393.619 350.225 li
396.454 355.895 li
0 0 .399902 .199951 cmyk
f
.3985 lw
405.095 347.356 mo
393.619 350.225 li
396.518 356.022 li
0 0 .199951 .800781 cmyk
@
48.5844 355.894 mo
59.9231 355.894 li
59.9231 281.366 li
48.5844 281.366 li
cp
0 0 .5 .5 cmyk
f
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: MBAAAA+URWPalladioL-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKQ+URWPalladioL-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/exclam <1C60D8A8C9B854D07C875CBC66D41DDC70BCC7378E09D6A0189F9AD
72C5B7776FB0629DDAFF04F5EB22E1A84A837DAD5FEF68A365B8163C4000E137
3F009EFEB343C4C7446D8AE740C759B397E7368> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKQ+URWPalladioL-Bold /Encoding get
dup 33 /exclam put
pop
%ADOEndSubsetFont
/TNCDKQ+URWPalladioL-Bold*1 
[33{/.notdef}rp /exclam 12{/.notdef}rp /period 2{/.notdef}rp /one 8{/.notdef}rp /colon 
6{/.notdef}rp /A /.notdef /C /D /E /F 2{/.notdef}rp 
/I 2{/.notdef}rp /L /M /N /O /P /.notdef 
/R /S /T /U /V 10{/.notdef}rp /a 2{/.notdef}rp 
/d /e 6{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /s 77{/.notdef}rp /Aacute 7{/.notdef}rp /Eacute 9{/.notdef}rp 
/Oacute 44{/.notdef}rp]
TNCDKQ+URWPalladioL-Bold nf
TNCDKQ+URWPalladioL-Bold*1 [24.7871 0 0 -24.7871 0 0 ]msf
50.8086 327.163 mo
(!)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QBAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKS+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/q <1C60D8A8C9B7EB086E79C455D740F5D8BEBDE6A5D2BC31C8A2A749007453
4E0576A03DF683A355711C2FC1A34682E6CF7ADA2BD58C80CD42D92A1ADCEA4D
BA209568139CB416525FFB812CE332D7230D2E54DAA5DE294F194AEAB5912D18
F40AE71D12920E18EDDFA17C9D26B8773EE80B04D5FE6AF2D3C0C77B6F32048A
A53B05101923383BB670F81E6CA9A847924179824DAAF95BB742F5DB21985059
51F0BCF1BB3A005B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKS+URWPalladioL-Roma /Encoding get
dup 113 /q put
pop
%ADOEndSubsetFont
/TNCDKS+URWPalladioL-Roma*1 
[44{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two 
5{/.notdef}rp /eight /.notdef /colon 6{/.notdef}rp /A /B /C 
/D /E /F 2{/.notdef}rp /I 3{/.notdef}rp /M /N 
/O 2{/.notdef}rp /R /S 13{/.notdef}rp /a /b /c 
/d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m 
/n /o /p /q /r /s /t /u 
3{/.notdef}rp /y 103{/.notdef}rp /aacute 17{/.notdef}rp /oacute 12{/.notdef}rp]
TNCDKS+URWPalladioL-Roma nf
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
65.5926 294.829 mo
(Notemosquesi)
[8.27993 5.43606 3.24904 4.77003 8.79296 5.43605 6.73206 5.57998 6.00296 7.26313 4.22095 0 
]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
136.873 294.829 mo
(\()sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
141.319 294.829 mo
(x)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
146.521 294.829 mo
(,)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
150.796 294.829 mo
(y)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
156.025 294.829 mo
(\)=)
[7.04684 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
174.357 294.829 mo
(P)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
180.693 294.829 mo
(\()sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
184.87 294.829 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
188.973 294.829 mo
(,)sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
193.248 294.829 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
198.216 294.829 mo
(\))sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
202.365 294.829 mo
(,entoncessetieneque)
[4.97696 4.77005 5.79599 3.24904 5.43607 5.79599 4.41901 4.77003 6.73193 4.22095 7.26305 3.24902 
2.89801 4.77002 5.79602 7.26324 5.57996 6.00299 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
154.755 320.452 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
158.859 316.339 mo
(2)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
166.032 320.452 mo
(=)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
177.291 320.452 mo
(x)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
182.494 316.339 mo
(2)sh
%ADOBeginSubsetFont: UBAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKV+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B6FC2D57823F96FCEAA42600BD46AFBB76FB6FF2C168953
BCB7FF7D0E7F5CE3217809FB248485B096C8249504CD271987061A868385A7E2
BE1F08F0D0B8329FA5B5F11EC03D020ECC8A0457ADD9A63765A60296998F5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKV+CMR10 /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
/TNCDKV+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 17{/.notdef}rp /equal 194{/.notdef}rp]
TNCDKV+CMR10 nf
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
188.839 320.452 mo
(+)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
199.099 320.452 mo
(y)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
204.202 316.339 mo
(2)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
228.412 320.452 mo
(ytan)
[27.1262 3.24904 4.97699 0 ]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
269.686 320.452 mo
(\()sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
273.961 320.452 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
278.929 320.452 mo
(\)=)
[7.04684 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
298.387 313.702 mo
(y)sh
.405 lw
298.125 317.954 mo
303.634 317.954 li
@
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
298.423 327.283 mo
(x)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
304.822 320.452 mo
(,)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
65.5928 347.416 mo
(paratodo)
[5.98498 4.977 3.93304 7.48782 3.24904 5.43606 6.08392 0 ]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
110.799 347.416 mo
(\()sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
114.976 347.416 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
119.08 347.416 mo
(,)sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
123.355 347.416 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
128.322 347.416 mo
(\))sh
TNCDKR+CMSY10*1 [10.381 0 0 -10.381 0 0 ]msf
135.36 347.416 mo
(2)sh
TNCDKT+PazoMathBlackboardBold*1 [9.96264 0 0 -9.96264 0 0 ]msf
145.171 347.416 mo
(R)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
153.244 343.798 mo
(2)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
160.012 347.416 mo
(talque)
[3.24904 4.97701 5.39119 5.57997 6.00296 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
192.781 347.416 mo
(x)sh
%ADOBeginSubsetFont: OBAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKR+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/negationslash <1C60D8A8C9C4A6C26B10FB8D5BDE6CDBBEB886041A010C58
7BDBB6C6D81F15A730606F174AB3495E2650C76FA5AB4C017DE7B4889B1BFCC1
5958E3BD07C0EB458EBB4CF8D9C9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKR+CMSY10 /Encoding get
dup 54 /negationslash put
pop
%ADOEndSubsetFont
/TNCDKR+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 16{/.notdef}rp /element 3{/.notdef}rp 
/negationslash /mapsto 200{/.notdef}rp]
TNCDKR+CMSY10 nf
TNCDKR+CMSY10*1 [10.381 0 0 -10.381 0 0 ]msf
200.872 347.416 mo
(6)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
201.124 347.416 mo
(=)sh
1 /0 /CSD get_res sepcs
1 sep
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
212.086 347.416 mo
(0.)
[4.97701 0 ]xsh
48.684 435.664 mo
405.356 435.664 li
405.356 374.199 li
48.684 374.199 li
cp
.0404968 .0310059 0 .0109863 cmyk
f
gsave
48.1858 435.664 mo
405.356 435.664 li
405.356 374.199 li
48.1858 374.199 li
48.1858 435.664 li
clp
.99628 lw
48.684 435.664 mo
48.684 374.199 li
.810547 .619141 0 .219971 cmyk
@
grestore
1 /0 /CSD get_res sepcs
1 sep
TNCDKQ+URWPalladioL-Bold*1 [9.96264 0 0 -9.96264 0 0 ]msf
59.3969 388.942 mo
(E)sh
%ADOBeginSubsetFont: MBAAAA+URWPalladioL-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKQ+URWPalladioL-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/J <1C60D8A8C9B7361F0E3727014E17B348D0505A5CCD842E6905F9CF438A44
3F5914D25D915317F950E5AACF87898005B14DD728D663235C6667E300238C10
DB0CECEF8B8B5989FBCAFFE4B24A384996F649B61B217E70BBE830EDB5D8A1F6
7193D7BBFCBEFBA3D0D2B713BB7181E8BD3A35BC8E67> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKQ+URWPalladioL-Bold /Encoding get
dup 74 /J put
pop
%ADOEndSubsetFont
/TNCDKQ+URWPalladioL-Bold*1 
[33{/.notdef}rp /exclam 12{/.notdef}rp /period 2{/.notdef}rp /one 8{/.notdef}rp /colon 
6{/.notdef}rp /A /.notdef /C /D /E /F 2{/.notdef}rp 
/I /J /.notdef /L /M /N /O /P 
/.notdef /R /S /T /U /V 10{/.notdef}rp /a 
2{/.notdef}rp /d /e 6{/.notdef}rp /l /.notdef /n /o 
/p /.notdef /r /s 77{/.notdef}rp /Aacute 7{/.notdef}rp /Eacute 
9{/.notdef}rp /Oacute 44{/.notdef}rp]
TNCDKQ+URWPalladioL-Bold nf
TNCDKQ+URWPalladioL-Bold*1 [7.97011 0 0 -7.97011 0 0 ]msf
65.9848 388.942 mo
(JERCICIO)
[3.60006 5.37299 6.25508 6.25507 3.60007 6.25508 3.60006 0 ]xsh
TNCDKQ+URWPalladioL-Bold*1 [9.96264 0 0 -9.96264 0 0 ]msf
110.247 388.942 mo
(1.)
[5.2289 0 ]xsh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
120.705 388.942 mo
(Calcular)
[7.06499 4.97701 2.89799 4.41899 6.00298 2.89799 4.97701 0 ]xsh
%ADOBeginSubsetFont: BBAAAA+CMEX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /BBAAAA+CMEX10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMEX10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 90 /integraldisplay put
def
/FontBBox {0 -2222 943 0} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0] def
/OtherBlues [-1159 -1139] def
/BlueScale 0.04796 def
/StdHW [47] def
/StdVW [47] def
/StemSnapH [40 47] def
/StemSnapV [40 47] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/integraldisplay <1C60D8A8C9B790A849148EA2EFC9362E655F2F729E21E0
A96F71F3D2F04B836DA2CAB1BC2E58AAC1B3720846A3A712506815034EF8014E
5CC4E36AFB4EF97A795583E2CDE40F7505B18CA2823D600DD6A04177BD13E773
24C80508B6994BE0D1DDD9C625179C01C399B6C9AF8D4FB77A6303E4EADC5506
F23FD6438EF745921134B35265D4B35DE5210353A58F1EF75E6E90201E6EF7A9
701A1D5388E400C599167967EA94A83E86F315503BCBF05FD39D76AA> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TNCDKX+CMEX10 /BBAAAA+CMEX10 findfont ct_VMDictPut
/TNCDKX+CMEX10*1 
[90{/.notdef}rp /integraldisplay 165{/.notdef}rp]
TNCDKX+CMEX10 nf
TNCDKX+CMEX10*1 [8.96636 0 0 -8.96636 0 0 ]msf
190.428 390.832 mo
(ZZ)
[5.89485 0 ]xsh
%ADOBeginSubsetFont: SBAAAA+URWPalladioL-Ital AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKU+URWPalladioL-Ital dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6FF868A10AD16A299A1260AEACE153450CF1D89F2CCE22D4E
9898FD15790AFC4AEC0CBAA04BCEBE8DFA4A75CA959F4AE08D28AF4C2F799500
C4FB05D6094B6FF04C4F42DB68CA1B994AE7E997C97BD1CE4B24F8AFD581CDD7
D8543CB3D2DE4AA19961FA17DE3F06392BDA62BEF16048B9A7450A76D274E11A
7C4787315463D3F9DB97B85FC11EC0DF86BA7AEDA46F79CB1BDF0DC32ACC68E5
5464EDCB1A186E944E2C1DC7AD19198FC1471502C1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKU+URWPalladioL-Ital /Encoding get
dup 68 /D put
pop
%ADOEndSubsetFont
/TNCDKU+URWPalladioL-Ital*1 
[68{/.notdef}rp /D 11{/.notdef}rp /P 33{/.notdef}rp /r 5{/.notdef}rp /x 
/y 134{/.notdef}rp]
TNCDKU+URWPalladioL-Ital nf
TNCDKU+URWPalladioL-Ital*1 [7.57161 0 0 -7.57161 0 0 ]msf
201.678 411.136 mo
(D)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
210.192 403.288 mo
(x)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
215.394 399.175 mo
(2)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
221.739 403.288 mo
(+)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
231.999 403.288 mo
(y)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
237.102 399.175 mo
(2)sh
%ADOBeginSubsetFont: SBAAAA+URWPalladioL-Ital AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKU+URWPalladioL-Ital dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7A73DCE8BA8860C516FBCC8331D0380F0654C91A07B867640
BD80F34181EF61F288AE2370727D6D037F71C0636E39D0523411E417B36DCC5C
86F123017356DC6D167D819C0540427AED15238AEE44DF40BA321FAF7D6AB793
45ED22F1C71DB996C1B5EB15FB6086A6DA410798D0922CFDE19C8232773C565C
5E40B6955B9655E8577E2F9FE238C007F356F03A8739B39DAB70599568F000E0
AE22EE5B7CBCC82F0BB3001BA0A4196121E190783E97CA3DBAF6EBF898BB0798
7516351B0013BBC1185DCE536C8C60> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKU+URWPalladioL-Ital /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
/TNCDKU+URWPalladioL-Ital*1 
[68{/.notdef}rp /D 11{/.notdef}rp /P 19{/.notdef}rp /d 13{/.notdef}rp /r 
5{/.notdef}rp /x /y 134{/.notdef}rp]
TNCDKU+URWPalladioL-Ital nf
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
243.168 403.288 mo
(dxdy)
[5.39999 5.32813 5.2289 0 ]xsh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
59.145 428.128 mo
(donde)
[6.08392 5.43606 5.79601 6.08392 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
90.1501 428.128 mo
(D)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
101.013 428.128 mo
(=)sh
%ADOBeginSubsetFont: OBAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKR+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/braceleft <1C60D8A8C9B7A73DB562253524F5E14A30E2D0BF696ED1EC1832
959CA9D8768D378B31F9958CC81B8983D97B99095D96B7B13FD5F176637D1917
CBA8C5B39E4DE518E3826A46DC89228CAF1C527CB89936763A26C8ABAEB05B83
D697601A16F0C30F623A5565FC8C7E46B86FBD1170D03B6D86481EAED1D0448D
97ECF43080CACC56F8DC5EAC27FF2F85FE282F323992DCE58CCAC225E57C7133
C46859EF9ACC558D046684C86AF46342> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKR+CMSY10 /Encoding get
dup 102 /braceleft put
pop
%ADOEndSubsetFont
/TNCDKR+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 16{/.notdef}rp /element 3{/.notdef}rp 
/negationslash /mapsto 46{/.notdef}rp /braceleft 153{/.notdef}rp]
TNCDKR+CMSY10 nf
TNCDKR+CMSY10*1 [10.381 0 0 -10.381 0 0 ]msf
112.101 428.128 mo
(f)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
117.546 428.128 mo
(\()sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
121.992 428.128 mo
(x)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
127.194 428.128 mo
(,)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
131.469 428.128 mo
(y)sh
TNCDKR+CMSY10*1 [10.381 0 0 -10.381 0 0 ]msf
139.461 428.128 mo
(2)sh
TNCDKT+PazoMathBlackboardBold*1 [9.96264 0 0 -9.96264 0 0 ]msf
149.271 428.128 mo
(R)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
157.344 424.51 mo
(2)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
164.517 428.128 mo
(:)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
170.196 428.128 mo
(x)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
175.398 424.51 mo
(2)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
181.743 428.128 mo
(+)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
191.994 428.128 mo
(y)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
197.097 424.51 mo
(2)sh
%ADOBeginSubsetFont: OBAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKR+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/lessequal <1C60D8A8C9B6FC2D944F5ADA1723A63EEFB5EFB5A4E3F88F7A8C
E8FA486CB3CC01EEA869AD308CC03B9D1111211DCD407425C635963FD7F9150F
1FBD1ACF38A1AE4207D9AF152444BD9DD8B01BDE5F620F6CD19263F98A2F18AD
CDAC42F6594BB6852F39DF6F7D1564BAE711AAF8D50C7841F847A8032B1E8699
602A6648> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKR+CMSY10 /Encoding get
dup 20 /lessequal put
pop
%ADOEndSubsetFont
/TNCDKR+CMSY10*1 
[15{/.notdef}rp /bullet 4{/.notdef}rp /lessequal 11{/.notdef}rp /minus /arrowright 16{/.notdef}rp 
/element 3{/.notdef}rp /negationslash /mapsto 46{/.notdef}rp /braceleft 153{/.notdef}rp]
TNCDKR+CMSY10 nf
TNCDKR+CMSY10*1 [10.381 0 0 -10.381 0 0 ]msf
204.279 428.128 mo
(\024)sh
%ADOBeginSubsetFont: QBAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKS+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A73DC608352D56964CA2A5C9DBEC6341939115632E2B1
29C21398D198AED6C494B39A65D194C0EF974C0D828C645EBB3888CEF3ED0823
A9488F08E167127CE729EC573AE9BD67AEB5D90CB0358402DA996C9ACD2F078B
41337B31DD01C2E7D6A5A46F9FA78C7E795E1739F1CD4FA4D4909A680A625C60
1A2DA7FF36C84A57BB6711F65ED617B8CB37666670ED620F046F03672C9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKS+URWPalladioL-Roma /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/TNCDKS+URWPalladioL-Roma*1 
[44{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two 
/.notdef /four 3{/.notdef}rp /eight /.notdef /colon 6{/.notdef}rp /A 
/B /C /D /E /F 2{/.notdef}rp /I 3{/.notdef}rp 
/M /N /O 2{/.notdef}rp /R /S 13{/.notdef}rp /a 
/b /c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp 
/l /m /n /o /p /q /r /s 
/t /u 3{/.notdef}rp /y 103{/.notdef}rp /aacute 17{/.notdef}rp /oacute 
12{/.notdef}rp]
TNCDKS+URWPalladioL-Roma nf
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
215.241 428.128 mo
(4,)
[4.97701 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
226.986 428.128 mo
(y)sh
%ADOBeginSubsetFont: DBAAAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /DBAAAA+CMMI10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 62 /greater put
def
/FontBBox {0 -40 694 540} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 442 453 466 683 705] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/greater <1C60D8A8C9B6FC2D0B7AF226145EBD4699910182AA44364E214EF1
81E4EF11F09B1CDF639298183041F70F09788525763201782FEB13E6B9A6E060
7F78254829620D4125185763FF66F3C7816DADE29DCA0BAAC1CEA7127EAA9D5F
75E8> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TNCDKY+CMMI10 /DBAAAA+CMMI10 findfont ct_VMDictPut
/TNCDKY+CMMI10*1 
[62{/.notdef}rp /greater 193{/.notdef}rp]
TNCDKY+CMMI10 nf
TNCDKY+CMMI10*1 [10.381 0 0 -10.381 0 0 ]msf
234.987 428.128 mo
(>)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
245.949 428.128 mo
(0)sh
%ADOBeginSubsetFont: OBAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKR+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/braceright <1C60D8A8C9B7A73DB562253524F77EAA0C9D86D36E2A3E50297
25A48EA4986EEB92642FB15114D993A3E4D78166C9507F82BF07B5E46AE791E4
8C3B5D13848EE2A0ED390B8EF77240E758B367FB2AC0AD1619CE65A4D162564D
60A402AEB4F44AD0059F796DBE87333B0184A0747010482EB8790381C7873A70
95E3FA12E2A8882D9D79D84512274A394AF253DDAAA1469882951252A7429856
03D0073C85F20BAEF47B61A9ECA7243ED> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKR+CMSY10 /Encoding get
dup 103 /braceright put
pop
%ADOEndSubsetFont
/TNCDKR+CMSY10*1 
[15{/.notdef}rp /bullet 4{/.notdef}rp /lessequal 11{/.notdef}rp /minus /arrowright 16{/.notdef}rp 
/element 3{/.notdef}rp /negationslash /mapsto 46{/.notdef}rp /braceleft /braceright 152{/.notdef}rp]
TNCDKR+CMSY10 nf
TNCDKR+CMSY10*1 [10.381 0 0 -10.381 0 0 ]msf
251.052 428.128 mo
(g)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
256.372 428.128 mo
(.)sh
%ADOBeginSubsetFont: SBAAAA+URWPalladioL-Ital AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKU+URWPalladioL-Ital dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707CAD73D5E52CDEBFA23E98E0798755F8BAD6ACD01
D2444DAFD8864379E62AF> |-
/S <1C60D8A8C9B7EF32A5CE17E79E33571045E13295CB210A5EA41258E69E79
119343F259F998A51166ACE20B05B45C5D6052156E74BBEA7E128D87F7F3E6AD
A4DA2B38EB79F8FE8E0941CA7344C91B9616CBAA26C2272AAC596AD1464B2169
7452C5BE8B0397B89E1293B15399998F055A75962706A00BDE26F285F353EE58
56258EB93607AED499080F3601EAA757C0BA87> |-
/c <1C60D8A8C9B704CCCCAF7C44AC75C1A5378A8B597057F232ED2AF0223CF9
0FE99BE38D49B40A9F36C2163A8EB77297182865320197AC27DC6EA0B39C41D5
B5EDED62566BB849DA36BB889634B41C1D6867C83C186D23EF77AFA0A2A68DF6
D24BBC636E71315C0FC5D17E451D> |-
/i <1C60D8A8C9B854D081E7D967DBB4F861AA90C6763196FA25E0974A0A50ED
974CD3377C24029821DBBEE0BA71957046B484BD03D289CBA21577FEDF4B4F46
F4EA4962803F02CD485C780B48B2BDADC270DCE99CF63B316B1C9E5E7F587768
B3D18137FF2C0373534A2E4DE447CAD3C09406A8B9B3CFD4A15028A35A356909
C24939664A03651FBCD9ECE206A19CA4B938DC8D1C> |-
/l <1C60D8A8C9B854D081E7D968072A76D477E98BA058FAED7DF2855EBCF785
C73C91BB8F353F9F5B591D6753250F86820155CDB69BE649F89847EEAEF7C7B7
28973627F3AFB4DB5882EA9B1753B8B2B2C7A4BEBE398DDB25A30D261C837C97
DCE376E81ADC732C082EEEE8> |-
/n <1C60D8A8C9B7EF325EAA3A327802CD836E30B5261FC73766AC12A7C6AFB0
B58F98EB8AE24233A31B020702C0CF567D5B6244B6E18CBC9084D90BAA20817F
6B20AD2B3E4147300EA8C26280ED7A4505938E2B16116527D6374BBED13436B1
F5E1420F68A9B16E8B7A1A6066655D52B73D8DAF8314CA9FC36A8C5A5B8EEB19
BB50400BE4AA0BC7BB89E9733FFD7C5274104111E9C2D8FB067A70E3BE56BD8D
0529911F5CCAC1CC23A4BFAA5F07E680ED36044C71D78E99944E5378> |-
/o <1C60D8A8C9B77FE2B99E96EA261DC1D487C7D9815EDAE18B8884D4316FA7
6EDFA8FAC01DEDA6D57247247CB98D4BF60191D0D75817123080DC66FB2FE4EC
E3BDBC10048C321DAB5C44655771B24FA703175A2E9A8EC6684BB58C3C8A9401
8E3600804197E01215F8E9F3B7EBA518E87F6E> |-
/u <1C60D8A8C9B7EF325EAA3A327802CDD7B39AB6050E51CEB44F1C5301EC4C
9333E92CCBA688C26CC4D7933AD1ED07EAE7E594E87934AD76E671D4F961DB13
BDAE45063C21BE598F22271C34DF44058EC0D23B7C2F3408A4127B88976BA8B8
72B1E9E52D181A264DDC22C466561F531AE9E53DFA95C199C8E7F1F5F4B5AFE2
158EE20CD32F4AF26FB2C140999807C7F7BABDB505758CDFCAFD9F51D4B2512B
75285C17C3B29FE845729E0258AD9D24C570E8014F31AF75DAABC1824047B98F
442966FE31> |-
/oacute <1C60D8A8C9B77FE2B99E96EA261DC1D487C7D9815EDAE18B8884D43
16FA76EDFA8FAC01DEDA6D57247247CB98D4BF60191D0D75817123080DC66FB2
FE4ECE3BDBC10048C321DAB5C44655771B24FA703175A2E9A8EC6684BB58C3C8
A94018E3600804197E01215F8E9F3B7EBA518E87F38F96086713EDF63517461F
26B9AEDB65B1B50C7D0FE3468208EEC729576> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKU+URWPalladioL-Ital /Encoding get
dup 46 /period put
dup 83 /S put
dup 99 /c put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 117 /u put
dup 243 /oacute put
pop
%ADOEndSubsetFont
/TNCDKU+URWPalladioL-Ital*1 
[46{/.notdef}rp /period 21{/.notdef}rp /D 11{/.notdef}rp /P 2{/.notdef}rp /S 
15{/.notdef}rp /c /d 4{/.notdef}rp /i 2{/.notdef}rp /l /.notdef 
/n /o 2{/.notdef}rp /r 2{/.notdef}rp /u 2{/.notdef}rp /x 
/y 121{/.notdef}rp /oacute 12{/.notdef}rp]
TNCDKU+URWPalladioL-Ital nf
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
48.1856 457.984 mo
(Soluci\363n.)
[5.535 4.419 2.772 5.535 4.05898 2.772 4.419 5.535 0 ]xsh
%ADOBeginSubsetFont: QBAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKS+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7DF559893AC75E30219414C5E8C9E57A554F8421CF71DFE36
4AFCAF35471E70ABC50F2FCCBCEB6282AB886129DB39ABC8E763C367B9737DFB
4F7E2E1671DB96D6D93AF71EB45058C2583CB204FF7F4D0A80BB0755F8F227AD
CEC39A5426D519157FE011451B47AA9EF64675378BDE29F22D86A57E3BE3F8A5
47B88F5540921E516681255B09F9BE3D927BC7865BAC85FF042DECA975E71EDA
3061A5C6423B9997F7D3AF8274826177A36E97C118C84BDA0B6493C6C1054C1F
CF1044525731B8> |-
/g <1C60D8A8C9B7EF3227731FCCDA1C13D12B3260E6F2A2369EA3F930B2E6FB
31F9655C7735A33E5B5315EF56E2317A290379D54D2E44C8414BFF1042EB5F0E
894359AB980315ABBBB174050B098437BD38C610EB1F1D71464A8B55DEB3108B
FB8C6BEE9B9BD1D7E07BD616E74CEDBB4A717CCE556E51DF5E2B8276402F853C
3AF830E5763B42C3A33F5600FFBBB3F18660128202610539259AADFB9785E32A
7653B7F26F56146468DDF61FC3841CEAD04848B51A2AD92E2958F3DA108A7A13
F8EA36D925428E853571C7B9794D81BD5B6D39FE89E9242BAC06574736E8AE7A
8ACDC632A12922DF998F925B0189367F6F488F233C169E411CC6AA4228719728
D8DC49CE9C96D3A4648E05F0028C4AF2D1D8968D56E39B600B369797CB4D8732
AC27CFDB211F10B7F1E88F7AF2> |-
/v <1C60D8A8C9B7E6F02031DA9BFB2F7EDC34BFD027B4159458F019679FFBE9
59F2F653945AA34D6DFA3407D7CD4F9DADBD754ACD8E40604DFE495590DB5921
7368AC8AD289BF4C397483FBEAD2F0887012D28ABB5A34CADFDAD042DDD5F854
2395B6BED80BDE30F1CFBBD3D6B68B81225830834A35F4ECA45E00120F96F74E
BB64C3BB871C4AE5DFE689D21B7503498D983AE2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKS+URWPalladioL-Roma /Encoding get
dup 80 /P put
dup 103 /g put
dup 118 /v put
pop
%ADOEndSubsetFont
/TNCDKS+URWPalladioL-Roma*1 
[44{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two 
/.notdef /four 3{/.notdef}rp /eight /.notdef /colon 6{/.notdef}rp /A 
/B /C /D /E /F 2{/.notdef}rp /I 3{/.notdef}rp 
/M /N /O /P /.notdef /R /S 13{/.notdef}rp 
/a /b /c /d /e /f /g /.notdef 
/i 2{/.notdef}rp /l /m /n /o /p /q 
/r /s /t /u /v 2{/.notdef}rp /y 103{/.notdef}rp 
/aacute 17{/.notdef}rp /oacute 12{/.notdef}rp]
TNCDKS+URWPalladioL-Roma nf
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
90.7196 457.984 mo
(Pararesolverestaintegral,tomaremoselcambiodevariabl)
[6.02104 4.97701 3.93304 8.14517 3.75317 4.77003 4.22097 5.43604 2.89801 5.62502 4.77003 7.11911 
4.77002 4.22098 3.24905 8.15413 2.89799 5.79601 3.24905 4.77003 5.535 3.93304 4.97699 2.89801 
5.67018 3.24904 5.43605 8.79294 4.97701 3.75284 4.77003 8.79294 5.43605 7.4158 4.77005 6.06595 
4.41901 4.97699 8.79294 5.5079 2.89801 8.61292 6.08392 7.9469 5.62503 4.97702 3.93301 2.89804 
4.97699 5.5079 0 ]xsh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
356.022 457.984 mo
(eacoorde-)
[7.94696 8.1539 4.41898 5.43607 5.43604 3.7532 6.08392 4.77005 0 ]xsh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
48.1856 472.33 mo
(nadaspolares,esdecir,elcambiodevariable)
[5.79601 4.977 6.08393 4.977 6.73199 5.98498 5.43605 2.89801 4.977 3.75288 4.77002 4.22098 
5.00391 4.77003 6.71395 6.08392 4.77005 4.41901 2.89798 3.19507 4.99492 4.77003 5.39093 4.41901 
4.97699 8.79297 5.50793 2.89801 7.94725 6.08392 7.26291 5.62505 4.97701 3.93304 2.89801 4.97701 
5.5079 2.89801 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
150.165 496.927 mo
(x)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
158.265 496.927 mo
(=)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
169.245 496.927 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
175.005 496.927 mo
(cos)
[4.41899 5.43607 0 ]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
189.216 496.927 mo
(\()sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
193.491 496.927 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
198.459 496.927 mo
(\))sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
222.534 496.927 mo
(y)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
248.13 496.927 mo
(y)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
256.122 496.927 mo
(=)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
267.111 496.927 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
272.871 496.927 mo
(sen)
[4.22095 4.77005 0 ]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
287.793 496.927 mo
(\()sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
292.068 496.927 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
297.036 496.927 mo
(\))sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
301.185 496.927 mo
(,)sh
%ADOBeginSubsetFont: QBAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKS+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/fi <1C60D8A8C9B7DE87AE5D1CFCD165D480E934895CD928286EF86E75FC4F9
84AED63336504833AF4669E60BA29816F971F829B63E5957EB1710B0A2FB8D1C
50B7E8143E9E587C759AB77EA2243E9FB81A5627795B32C656D5543200DE78F3
42CC87DA6D0AFEBCF1BC3E5444844B47D7FF6DFCB25A21EF3FE70F0FB541A9FE
EB1AA125FCA8F4D1099CF4780EA95C5859DA0E348958AF645409B98CC2F39938
442698FC37F1FB45365153BF08E774F01CF48749ED132A38215C957DD7C6D40C
9A8B87A8FA10E71C71FFF2FED3A7D8541DA6A7AA8EA7C461B7F3E944394A7660
12A6B1A8028D8E96B1CCFED2A86E9854D19BE0CDA5CBDA0EE0404915D7785CBF
4551DE27431AF887A429F6E66E109785E0EC4ACC457AC56F615051DD2C2FB139
272BF863F98F5F30BF8C8F1AF8318564A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKS+URWPalladioL-Roma /Encoding get
dup 2 /fi put
pop
%ADOEndSubsetFont
/TNCDKS+URWPalladioL-Roma*1 
[2{/.notdef}rp /fi 41{/.notdef}rp /comma /hyphen /period /.notdef /zero 
/one /two /.notdef /four 3{/.notdef}rp /eight /.notdef /colon 
6{/.notdef}rp /A /B /C /D /E /F 2{/.notdef}rp 
/I 3{/.notdef}rp /M /N /O /P /.notdef /R 
/S 13{/.notdef}rp /a /b /c /d /e /f 
/g /.notdef /i 2{/.notdef}rp /l /m /n /o 
/p /q /r /s /t /u /v 2{/.notdef}rp 
/y 103{/.notdef}rp /aacute 17{/.notdef}rp /oacute 12{/.notdef}rp]
TNCDKS+URWPalladioL-Roma nf
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
48.186 521.533 mo
(esdecir,tendremoslafunci\363nde\002nidapor)
[4.77004 6.72293 6.08392 4.77003 4.41901 2.898 3.19506 4.99492 3.24904 4.77004 5.79601 6.08392 
3.753 4.77003 8.79296 5.43607 6.73181 2.89801 7.46996 3.32092 6.00298 5.79601 4.41901 2.89799 
5.43604 8.29813 6.08392 4.77003 6.02997 5.79601 2.89801 6.08389 7.48801 5.98499 5.43605 0 
]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
164.664 546.13 mo
(P)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
171 546.13 mo
(\()sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
175.176 546.13 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
179.28 546.13 mo
(,)sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
183.555 546.13 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
188.523 546.13 mo
(\)=\()
[7.03787 11.0878 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
210.825 546.13 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
216.585 546.13 mo
(cos)
[4.41899 5.43607 0 ]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
230.796 546.13 mo
(\()sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
235.071 546.13 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
240.039 546.13 mo
(\))sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
244.188 546.13 mo
(,)sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
248.364 546.13 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
254.124 546.13 mo
(sen)
[4.22095 4.77005 0 ]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
269.046 546.13 mo
(\()sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
273.321 546.13 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
278.289 546.13 mo
(\)\))
[4.27496 0 ]xsh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
286.713 546.13 mo
(,)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
48.1858 570.736 mo
(para)
[5.98497 4.97701 3.93304 0 ]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
70.6948 570.736 mo
(\()sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
74.871 570.736 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
78.9749 570.736 mo
(,)sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
83.2499 570.736 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
88.2179 570.736 mo
(\))sh
TNCDKR+CMSY10*1 [10.381 0 0 -10.381 0 0 ]msf
95.2558 570.736 mo
(2)sh
TNCDKT+PazoMathBlackboardBold*1 [9.96264 0 0 -9.96264 0 0 ]msf
105.057 570.736 mo
(R)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
113.13 567.118 mo
(2)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
117.414 570.736 mo
(,conlocual)
[4.97696 4.41899 5.43607 8.29813 2.89799 7.92902 4.41899 6.00298 4.97701 0 ]xsh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
190.872 585.082 mo
(det)
[6.08392 4.77005 0 ]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
205.101 585.082 mo
(\()sh
%ADOBeginSubsetFont: SBAAAA+URWPalladioL-Ital AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKU+URWPalladioL-Ital dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/J <1C60D8A8C9B81F2C36E06F48932CD52E5516EEB492630AE22D368A7FA440
E4A20A24FBC2BF3DEF374D4CAC6AEC6A6B90F5B26B940723611BCF866173E816
53A40ABDB6129B06ECB8068EB1D0B0F6A9EE377D7337E4BFC8B511CE93F6A792
BE58497B36775EAC8DE8781B967536D3AD851AA5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKU+URWPalladioL-Ital /Encoding get
dup 74 /J put
pop
%ADOEndSubsetFont
/TNCDKU+URWPalladioL-Ital*1 
[46{/.notdef}rp /period 21{/.notdef}rp /D 5{/.notdef}rp /J 5{/.notdef}rp /P 
2{/.notdef}rp /S 15{/.notdef}rp /c /d 4{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /o 2{/.notdef}rp /r 2{/.notdef}rp /u 
2{/.notdef}rp /x /y 121{/.notdef}rp /oacute 12{/.notdef}rp]
TNCDKU+URWPalladioL-Ital nf
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
209.97 585.082 mo
(J)sh
TNCDKU+URWPalladioL-Ital*1 [7.57161 0 0 -7.57161 0 0 ]msf
213.417 586.882 mo
(P)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
218.754 585.082 mo
(\()sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
222.93 585.082 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
227.034 585.082 mo
(,)sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
231.309 585.082 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
236.277 585.082 mo
(\)\)=)
[4.27498 7.03786 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
258.579 585.082 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
48.1859 606.601 mo
(para)
[5.98497 4.97701 3.93304 0 ]xsh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
70.866 606.601 mo
(\()sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
75.0421 606.601 mo
(r)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
79.146 606.601 mo
(,)sh
TNCDKW+PazoMath-Italic*1 [9.96264 0 0 -9.96264 0 0 ]msf
83.421 606.601 mo
(q)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
88.389 606.601 mo
(\))sh
TNCDKR+CMSY10*1 [10.381 0 0 -10.381 0 0 ]msf
95.7601 606.601 mo
(2)sh
TNCDKT+PazoMathBlackboardBold*1 [9.96264 0 0 -9.96264 0 0 ]msf
105.885 606.601 mo
(R)sh
TNCDKS+URWPalladioL-Roma*1 [7.57161 0 0 -7.57161 0 0 ]msf
113.958 602.983 mo
(2)sh
%ADOBeginSubsetFont: QBAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKS+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/h <1C60D8A8C9B7F51B67AD9A8FE0E4D5A1E40547CD5061B56D49C463DD8BD8
7EB5B101AE02D14F2B8464A23092DE5AA3A0E034C9CBD441CF670D2E9A8C3CB2
C2B61B455B24C9FFC4703AD66CFF3BD3AB47E21B44370F299F13CE44109B571A
1331660F0AA3CC72273DC5D9E0B2F3D4E20A28380B630DCF402711849C852A22
D850AA0B4223ED2A5A66F1CF15CE13AFD68971F6159D069D878E656F7250F01B
DE29BCB38FFF773035A5C92FD68B12C074DA015994CE23C4E19FBA7F2C88C023
5636AA5F99273D58F19DA9312C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKS+URWPalladioL-Roma /Encoding get
dup 104 /h put
pop
%ADOEndSubsetFont
/TNCDKS+URWPalladioL-Roma*1 
[2{/.notdef}rp /fi 41{/.notdef}rp /comma /hyphen /period /.notdef /zero 
/one /two /.notdef /four 3{/.notdef}rp /eight /.notdef /colon 
6{/.notdef}rp /A /B /C /D /E /F 2{/.notdef}rp 
/I 3{/.notdef}rp /M /N /O /P /.notdef /R 
/S 13{/.notdef}rp /a /b /c /d /e /f 
/g /h /i 2{/.notdef}rp /l /m /n /o 
/p /q /r /s /t /u /v 2{/.notdef}rp 
/y 103{/.notdef}rp /aacute 17{/.notdef}rp /oacute 12{/.notdef}rp]
TNCDKS+URWPalladioL-Roma nf
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
118.242 606.601 mo
(.Ahora,necesitamosencontrar)
[5.15703 7.749 5.79601 5.43605 3.93306 4.97699 5.17502 5.79601 4.77005 4.41899 4.77003 4.22098 
2.89798 3.24905 4.97699 8.79295 5.43605 6.92096 4.77005 5.79599 4.41901 5.43604 5.79601 3.24902 
3.93304 4.97701 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
258.03 606.601 mo
(D)sh
%ADOBeginSubsetFont: OBAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
TNCDKR+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/asteriskmath <1C60D8A8C9B7A73DE3A3AF60AAF70821FF4AD2E94C918348C
BCA8AEEF23022D8AA8DF6DF0AE38E6622D0A3A1CD179CD821E9291A6488142EA
BDD01DC6F036ED63BA374F078996C72B6E1A28ADB42EF534B8348B9F261E625C
F9485FF283EF9EEC8BC252098B852A73CB0A586A029F2D6602ADCE7AE7D46186
EC557D0B55E7D81AA5D29A7C0F3B0F143FF0E696EB5F2FFAEF3ED1B416A685A3
47A781FB6845F3BA6D4CF57672078A6D864A5AE04F001> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TNCDKR+CMSY10 /Encoding get
dup 3 /asteriskmath put
pop
%ADOEndSubsetFont
/TNCDKR+CMSY10*1 
[3{/.notdef}rp /asteriskmath 11{/.notdef}rp /bullet 4{/.notdef}rp /lessequal 11{/.notdef}rp /minus 
/arrowright 16{/.notdef}rp /element 3{/.notdef}rp /negationslash /mapsto 46{/.notdef}rp /braceleft 
/braceright 152{/.notdef}rp]
TNCDKR+CMSY10 nf
TNCDKR+CMSY10*1 [7.88962 0 0 -7.88962 0 0 ]msf
266.103 602.983 mo
(\003)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
273.312 606.601 mo
(talque)
[3.24902 4.97702 5.56189 5.57999 6.00296 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
306.45 606.601 mo
(P)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
312.786 606.601 mo
(\()sh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
317.259 606.601 mo
(D)sh
TNCDKR+CMSY10*1 [7.88962 0 0 -7.88962 0 0 ]msf
325.332 602.983 mo
(\003)sh
TNCDKV+CMR10*1 [10.381 0 0 -10.381 0 0 ]msf
329.994 606.601 mo
(\)=)
[7.37106 0 ]xsh
TNCDKU+URWPalladioL-Ital*1 [9.96264 0 0 -9.96264 0 0 ]msf
348.975 606.601 mo
(D)sh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
356.949 606.601 mo
(.Dadoque)
[5.15704 7.71301 4.97699 6.08392 8.11826 5.57996 6.00299 0 ]xsh
TNCDKS+URWPalladioL-Roma*1 [9.96264 0 0 -9.96264 0 0 ]msf
224.28 646.534 mo
(1)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
/TNCDKY+CMMI10*1 uf
/TNCDKY+CMMI10 uf
/DBAAAA+CMMI10 uf
/TNCDKX+CMEX10*1 uf
/TNCDKX+CMEX10 uf
/BBAAAA+CMEX10 uf
/TNCDKW+PazoMath-Italic*1 uf
/TNCDKW+PazoMath-Italic uf
/WBAAAA+PazoMath-Italic uf
/TNCDKV+CMR10*1 uf
/TNCDKV+CMR10 uf
/UBAAAA+CMR10 uf
/TNCDKS+URWPalladioL-Roma*1 uf
/TNCDKS+URWPalladioL-Roma uf
/QBAAAA+URWPalladioL-Roma uf
/TNCDKT+PazoMathBlackboardBold*1 uf
/TNCDKT+PazoMathBlackboardBold uf
/TAAAAA+PazoMathBlackboardBold uf
/TNCDKU+URWPalladioL-Ital*1 uf
/TNCDKU+URWPalladioL-Ital uf
/SBAAAA+URWPalladioL-Ital uf
/TNCDKQ+URWPalladioL-Bold*1 uf
/TNCDKQ+URWPalladioL-Bold uf
/MBAAAA+URWPalladioL-Bold uf
/TNCDKR+CMSY10*1 uf
/TNCDKR+CMSY10 uf
/OBAAAA+CMSY10 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
